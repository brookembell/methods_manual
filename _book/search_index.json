[["index.html", "LASTING Four-Pillar Model Methodology Introduction Github Repository Data Inputs Code Model Output", " LASTING Four-Pillar Model Methodology Brooke M. Bell 2025-03-10 Introduction This is the comprehensive manual that describes all data inputs and methods used for the LASTING 4-pillar model. This manual was built using bookdown, an open-source R package that facilitates writing books and long-form articles/reports with R Markdown. Github Repository A Github repository (AKA repo) titled methods_manual has been created to store all of the project’s code, data, and documentation (including this manual). In order to gain access to the Github repo, you must ask Brooke to add you as a user. Data Inputs All of the raw data inputs and cleaned datasets are located in the repo: GitHub/methods-manual/data_inputs The raw input files are located in their respectively named folders. For example, the raw NHANES intake data is located in: GitHub/methods-manual/data_inputs/DIET/dietary_intake/DATA/raw_data The raw DataField GHG impact factor dataset is located in: GitHub/methods-manual/data_inputs/ENVIRONMENT/ghg_ced_impacts/DATA Code All of the data cleaning code is embedded within this manual. All of the model code is located in a different repo titled LASTING, managed by Fred Cudhea. The goal is to eventually incorporate the model code into this manual as well, but it’s still TBD. Currently, only Fred Cudhea and Brooke Bell have access to this code. To gain access, please contact Fred and Brooke. As of right now, the R code used to run the analysis on the Tufts High Performance Computing (HPC) Cluster is located in: Github/LASTING/Code/cluster code In order to gain access to the cluster, you must first request an account through ITS here. The primary script is “LASTING_cluster_w_masterinput.R”. This script should be run on the cluster. For more details on how to run the code from the cluster, contact Fred and Brooke. Model Output Output from the models is located in the Box folder here: Box/lasting_aim_3/model_development/model_output "],["summary-of-data-inputs.html", "Chapter 1 Summary of Data Inputs 1.1 Diet Inputs", " Chapter 1 Summary of Data Inputs This chapter describes all of the data inputs that are used in the model. All data inputs fall into one of the following categories: diet, health, environment, economic, social, and other. In the “methods_manual” folder, there is a “data_inputs” subfolder that contains the following subfolders that correspond with each data input: methods_manual/data_inputs/DIET/counterfactual_intake (Box) methods_manual/data_inputs/DIET/dietary_intake (Box) methods_manual/data_inputs/ECONOMIC/fah_fafh_ratio methods_manual/data_inputs/ECONOMIC/food_prices methods_manual/data_inputs/ENVIRONMENT/ghg_ced_impacts methods_manual/data_inputs/ENVIRONMENT/land_use methods_manual/data_inputs/ENVIRONMENT/water_impacts methods_manual/data_inputs/HEALTH/cancer_incidence methods_manual/data_inputs/HEALTH/cvd_mortality methods_manual/data_inputs/HEALTH/effect_sizes_dietfactor_bmi methods_manual/data_inputs/HEALTH/effect_sizes_dietfactor_sbp methods_manual/data_inputs/HEALTH/logrr_dietfactor_disease methods_manual/data_inputs/HEALTH/overweight_prevalence methods_manual/data_inputs/HEALTH/rr_bmi_cancer methods_manual/data_inputs/HEALTH/rr_bmi_cvd methods_manual/data_inputs/HEALTH/rr_sbp_cvd methods_manual/data_inputs/HEALTH/systolic_blood_pressure methods_manual/data_inputs/HEALTH/tmred methods_manual/data_inputs/SOCIAL/forced_labor methods_manual/data_inputs/OTHER/dietfactor_to_fcid_mapping methods_manual/data_inputs/OTHER/dietfactor_to_fndds_mapping methods_manual/data_inputs/OTHER/food_waste methods_manual/data_inputs/OTHER/labels methods_manual/data_inputs/OTHER/unit_conversions methods_manual/data_inputs/OTHER/us_population 1.1 Diet Inputs 1.1.1 Counterfactual Intake Purpose This dataset contains three recommended dietary patterns (Healthy U.S.-Style Dietary Pattern, Healthy Vegetarian Dietary Pattern, and Healthy Mediterranean-Style Dietary Pattern) from the Dietary Guidelines for Americans (DGA) 2020-2025 report; 1 vegan dietary pattern published in the literature, and 1 dietary pattern that was constructed by the LASTING team (DGA+ Pattern). This dataset serves as the “ideal” dietary pattern that we are shifting to in the 4 models. Raw data sources DGA 2020-2025, Table A3-2: Healthy U.S.-Style Dietary Pattern for Ages 2 and Older (data) DGA 2020-2025, Table A3-4: Healthy Vegetarian Dietary Pattern for Ages 2 and Older (data) DGA 2020-2025, Table A3-5: Healthy Mediterranean-Style Dietary Pattern for Ages 2 and Older (data) Vegan dietary pattern: Hess 2022 (paper) DGA+ pattern: AHA recs, ACS recs (Brooke - add more info here) Raw data location methods_manual/data_inputs/DIET/counterfactual_intake/RESOURCES/DGA 2020-2025/Table A3-2 Healthy U.S.-Style.xlsx methods_manual/data_inputs/DIET/counterfactual_intake/RESOURCES/DGA 2020-2025/Table A3-4 Healthy Vegetarian.xlsx methods_manual/data_inputs/DIET/counterfactual_intake/RESOURCES/DGA 2020-2025/Table A3-5 Healthy Mediterranean-Style.xlsx methods_manual/data_inputs/DIET/counterfactual_intake/RESOURCES/Vegan/Hess 2022.pdf methods_manual/data_inputs/DIET/counterfactual_intake/RESOURCES/DGA+/Org dietary recommendations - operationalized.xlsx Data pre-processing notes We use the 2,000-calorie recommendations for all dietary patterns. Standard deviations were calculated as 10% of the recommendation value, and standard errors were set to 0. Any recommendation values at the week-level were converted to day-level. For example, the Healthy U.S.-Style recommends 1.5 cups/week of dark-green vegetables. This value was divided by 7 and the new value is 0.21 cups/day. Some of the DGA recommendations for various food items were grouped together. For example, the Healthy U.S.-Style recommends 26 oz/week of meats, poultry, and eggs, but it does not provide values for just meats, poultry, or eggs. Therefore, to get recommendation values for each of these three food items individually, we used NHANES 2015-2018 data to look at the intake distribution of these three food items and then applied that proportion to the total 26 oz/week value. This same method was applied to the food group ‘Nuts, seeds, and soy products’, and ‘Limit on calories for other uses’ (added sugar and saturated fat). We also had to construct recommendation values for the dietary factors ‘fruit_exc_juice’ (fruit excluding juice) and ‘veg_exc_sta’ (vegetables excluding starchy vegetables). The recommendation value for veg_exc_sta was simply the sum of the recommendation values for veg_dg (dark-green vegetables), veg_ro (red-orange vegetables), and veg_oth (other vegetables). To calculate the recommendation value for fruit_exc_juice, we utilized the proportion of whole fruits to fruit juice from NHANES. Approximately 75% of total fruit consumed was whole fruit excluding juice. Therefore, the recommendation value for fruit_exc_juice was the DGA recommended value for total fruit multiplied by 0.753. The NHANES proportions are located in: methods_manual/data_inputs/DIET/counterfactual_intake/DATA/NHANES proportions.xlsx (sheets ‘Fruit proportions’, ‘Veg proportions’, ‘Animal protein props US MED’, ‘Veg protein proportions US MED’, and ‘Sugar proportions’) Raw data (pre-processed) location methods_manual/data_inputs/DIET/counterfactual_intake/DATA/counterfactual_intake_050724.csv "],["cleaning-code---nhanes-diet-data.html", "Chapter 2 Cleaning Code - NHANES Diet Data 2.1 Processed and Organ Meat 2.2 Clean Raw NHANES Data", " Chapter 2 Cleaning Code - NHANES Diet Data This chapter walks you through all of code used to clean the raw NHANES dietary intake datasets. 2.1 Processed and Organ Meat To start, we need to disaggregate “procecessed meat” into “processed red meat” and “processed poultry’ categories. We need this because the environmental impact factors don’t take”processed” into consideration, so we’ll need to eventually create new food groups for the environment model (“total red meat” and “total poultry”, which include both unprocessed and processed meat). This is done using a SAS MACRO written by the USDA, located here: TBD/Processed Meat Categories NHANES day 1_revised_121123.sas This code produces four SAS datasets: meat_day1.sas7bdat meat_day1_sum.sas7bdat meat_day2.sas7bdat meat_day2_sum.sas7bdat We also have to disaggregate the organ meat food codes into “red meat” or “poultry” categories. I manually mapped various FNDDS codes that represented organ meats to either “red meat” or “poultry”. The mapping is here: methods_manual/data_inputs/DIET/dietary_intake/DATA/raw_data/meat/organ_meats_bothdays_mapped_121323.csv Then, I merged this mapping with the processed meat data. library(tidyverse) library(haven) rm(list = ls()) # read in meat data meat_day1 &lt;- read_sas(&quot;data_inputs/DIET/dietary_intake/DATA/clean_data/meat_day1.sas7bdat&quot;) meat_day2 &lt;- read_sas(&quot;data_inputs/DIET/dietary_intake/DATA/clean_data/meat_day2.sas7bdat&quot;) # read in organ mapping new_organ &lt;- read_csv(&quot;data_inputs/DIET/dietary_intake/DATA/raw_data/meat/organ_meats_bothdays_mapped_121323.csv&quot;) # DAY 1 ----- meat_day1_1 &lt;- meat_day1 %&gt;% filter(!(is.na(SEQN))) %&gt;% select(SEQN, DESCRIPTION, FOODCODE, DR1ILINE, DR1IGRMS, DR1I_PF_ORGAN, total_redmeat, total_poultry) %&gt;% arrange(SEQN, DR1ILINE) # filter to organ intake &gt; 0 meat_day1_1 %&gt;% filter(DR1I_PF_ORGAN &gt; 0) # join with day1 meat_day1_2 &lt;- left_join(meat_day1_1, new_organ, by = &quot;DESCRIPTION&quot;) meat_day1_3 &lt;- meat_day1_2 %&gt;% rowwise() %&gt;% mutate(new = ifelse(is.na(new), &quot;No change&quot;, new), total_redmeat_new = ifelse(new == &quot;pf_redm&quot;, total_redmeat + DR1I_PF_ORGAN, total_redmeat), total_poultry_new = ifelse(new == &quot;pf_poultry&quot;, total_poultry + DR1I_PF_ORGAN, total_poultry)) %&gt;% select(SEQN, DR1ILINE, total_redmeat_new, total_poultry_new) # export write_rds(meat_day1_3, &quot;data_inputs/DIET/dietary_intake/DATA/clean_data/meat_day1.rds&quot;) # DAY 2 ----- meat_day2_1 &lt;- meat_day2 %&gt;% filter(!(is.na(SEQN))) %&gt;% select(SEQN, DESCRIPTION2, FOODCODE2, DR2ILINE, DR2IGRMS, DR2I_PF_ORGAN, total_redmeat_day2, total_poultry_day2) %&gt;% arrange(SEQN, DR2ILINE) meat_day2_1 %&gt;% filter(DR2I_PF_ORGAN &gt; 0) # join with day2 meat_day2_2 &lt;- left_join(meat_day2_1, new_organ, by = c(&quot;DESCRIPTION2&quot; = &quot;DESCRIPTION&quot;)) meat_day2_3 &lt;- meat_day2_2 %&gt;% rowwise() %&gt;% mutate(new = ifelse(is.na(new), &quot;No change&quot;, new), total_redmeat_new = ifelse(new == &quot;pf_redm&quot;, total_redmeat_day2 + DR2I_PF_ORGAN, total_redmeat_day2), total_poultry_new = ifelse(new == &quot;pf_poultry&quot;, total_poultry_day2 + DR2I_PF_ORGAN, total_poultry_day2)) %&gt;% select(SEQN, DR2ILINE, total_redmeat_new, total_poultry_new) # export write_rds(meat_day2_3, &quot;data_inputs/DIET/dietary_intake/DATA/clean_data/meat_day2.rds&quot;) 2.2 Clean Raw NHANES Data Now that I have dealt with processed and organ meat, I can start to clean the raw NHANES data. We use data from the 2015-2016 and 2017-2018 cycles. Step 1: Set up workspace rm(list=ls()) # load packages library(foreign) library(survey) library(tidyverse) library(psych) library(haven) library(readxl) Step 2: Clean individual-level food intake datasets # 2015-2016 diet data (i) # foods day 1 foods_i1_nutrients &lt;- read_sas(&quot;data_inputs/DIET/dietary_intake/DATA/raw_data/dr1iff_i.sas7bdat&quot;) foods_i1_whole &lt;- read_sas(&quot;data_inputs/DIET/dietary_intake/DATA/raw_data/fped_dr1iff_1516.sas7bdat&quot;) # join foods_i1 &lt;- left_join(foods_i1_whole, foods_i1_nutrients) %&gt;% mutate(nhanes_cycle = &quot;2015-2016&quot;) # foods day 2 foods_i2_nutrients &lt;- read_sas(&quot;data_inputs/DIET/dietary_intake/DATA/raw_data/dr2iff_i.sas7bdat&quot;) foods_i2_whole &lt;- read_sas(&quot;data_inputs/DIET/dietary_intake/DATA/raw_data/fped_dr2iff_1516.sas7bdat&quot;) # join foods_i2 &lt;- left_join(foods_i2_whole, foods_i2_nutrients) %&gt;% mutate(nhanes_cycle = &quot;2015-2016&quot;) # 2017-2018 diet data (j) # foods day 1 foods_j1_nutrients &lt;- read_sas(&quot;data_inputs/DIET/dietary_intake/DATA/raw_data/dr1iff_j.sas7bdat&quot;) foods_j1_whole &lt;- read_sas(&quot;data_inputs/DIET/dietary_intake/DATA/raw_data/fped_dr1iff_1718.sas7bdat&quot;) #join foods_j1 &lt;- left_join(foods_j1_whole, foods_j1_nutrients) %&gt;% mutate(nhanes_cycle = &quot;2017-2018&quot;) # foods day 2 foods_j2_nutrients &lt;- read_sas(&quot;data_inputs/DIET/dietary_intake/DATA/raw_data/dr2iff_j.sas7bdat&quot;) foods_j2_whole &lt;- read_sas(&quot;data_inputs/DIET/dietary_intake/DATA/raw_data/fped_dr2iff_1718.sas7bdat&quot;) # join foods_j2 &lt;- left_join(foods_j2_whole, foods_j2_nutrients) %&gt;% mutate(nhanes_cycle = &quot;2017-2018&quot;) # create day 1 and 2 datasets foods_day1 &lt;- rbind(foods_i1, foods_j1) %&gt;% mutate(foodsource = ifelse(DR1FS == 1, &quot;Grocery&quot;, &quot;Other&quot;), # create food source variable foodsource = replace_na(foodsource, &quot;Other&quot;), # replace NAs with &quot;other&quot; (applies to tap water and breast milk) dayrec = 1) # day1 foods_day2 &lt;- rbind(foods_i2, foods_j2) %&gt;% mutate(foodsource = ifelse(DR2FS == 1, &quot;Grocery&quot;, &quot;Other&quot;), # create food source variable foodsource = replace_na(foodsource, &quot;Other&quot;), # replace NAs with &quot;other&quot; (applies to tap water and breast milk) dayrec = 2) # read in meat data meat_day1 &lt;- read_rds(&quot;data_inputs/DIET/dietary_intake/DATA/clean_data/meat_day1.rds&quot;) meat_day2 &lt;- read_rds(&quot;data_inputs/DIET/dietary_intake/DATA/clean_data/meat_day2.rds&quot;) foods_day1_ &lt;- left_join(foods_day1, meat_day1, by = c(&quot;SEQN&quot;, &quot;DR1ILINE&quot;)) foods_day2_ &lt;- left_join(foods_day2, meat_day2, by = c(&quot;SEQN&quot;, &quot;DR2ILINE&quot;)) # check foods_day1_ %&gt;% select(SEQN, DR1ILINE, DR1I_PF_MPS_TOTAL, DR1I_PF_SEAFD_HI, DR1I_PF_SEAFD_LOW, total_redmeat_new, total_poultry_new) foods_day1_ %&gt;% filter(DR1I_PF_ORGAN &gt; 0) %&gt;% select(SEQN, DR1ILINE, DR1I_PF_MPS_TOTAL, DR1I_PF_SEAFD_HI, DR1I_PF_SEAFD_LOW, total_redmeat_new, total_poultry_new) # Calculate amount of intake for each dietary factor # for day 1 and day 2 # by SEQN and foodsource # first need to create diet variables that are combinations of 2+ vars # day 1 foods_day1_1 &lt;- foods_day1_ %&gt;% rowwise() %&gt;% rename(sat_fat = DR1ISFAT, p_fat = DR1IPFAT, sodium = DR1ISODI, gr_refined = DR1I_G_REFINED, gr_whole = DR1I_G_WHOLE, added_sugar = DR1I_ADD_SUGARS, fruit_tot = DR1I_F_TOTAL, fruit_juice = DR1I_F_JUICE, fiber = DR1IFIBE, dairy_tot = DR1I_D_TOTAL, veg_dg = DR1I_V_DRKGR, veg_oth = DR1I_V_OTHER, veg_ro = DR1I_V_REDOR_TOTAL, veg_sta = DR1I_V_STARCHY_TOTAL, veg_leg = DR1I_V_LEGUMES, oil = DR1I_OILS, pf_egg = DR1I_PF_EGGS, pf_ns = DR1I_PF_NUTSDS, pf_soy = DR1I_PF_SOY, pf_poultry = DR1I_PF_POULT, pf_redm = DR1I_PF_MEAT, pf_redm_tot = total_redmeat_new, pf_poultry_tot = total_poultry_new, pf_leg = DR1I_PF_LEGUMES, kcal = DR1IKCAL) %&gt;% mutate(sea_omega3_fa = sum(DR1IP226, DR1IP205), veg_exc_sta = sum(veg_dg, veg_ro, veg_oth), fruit_exc_juice = sum(DR1I_F_CITMLB, DR1I_F_OTHER), pf_pm = sum(DR1I_PF_CUREDMEAT, DR1I_PF_ORGAN), pf_seafood = sum(DR1I_PF_SEAFD_HI, DR1I_PF_SEAFD_LOW), leg_tot = sum(pf_leg, pf_soy), # doesn&#39;t include soy milk? pf_animal = sum(DR1I_PF_MPS_TOTAL, pf_egg), pf_plant = sum(pf_leg, pf_ns, pf_soy)) %&gt;% ungroup() # create soy milk category foods_day1_2 &lt;- foods_day1_1 %&gt;% mutate(dairy_soy = ifelse(str_detect(DESCRIPTION, &quot;Soy milk&quot;) &amp; dairy_tot &gt; 0, dairy_tot, 0), dairy_cow = ifelse(str_detect(DESCRIPTION, &quot;Soy milk&quot;, negate = TRUE) &amp; dairy_tot &gt; 0, dairy_tot, 0)) # check foods_day1_2 %&gt;% filter(dairy_tot &gt; 0) %&gt;% select(SEQN, DESCRIPTION, dairy_tot, dairy_soy, dairy_cow) #good # day 2 foods_day2_1 &lt;- foods_day2_ %&gt;% rowwise() %&gt;% rename(sat_fat = DR2ISFAT, p_fat = DR2IPFAT, sodium = DR2ISODI, gr_refined = DR2I_G_REFINED, gr_whole = DR2I_G_WHOLE, added_sugar = DR2I_ADD_SUGARS, fruit_tot = DR2I_F_TOTAL, fruit_juice = DR2I_F_JUICE, fiber = DR2IFIBE, dairy_tot = DR2I_D_TOTAL, veg_dg = DR2I_V_DRKGR, veg_oth = DR2I_V_OTHER, veg_ro = DR2I_V_REDOR_TOTAL, veg_sta = DR2I_V_STARCHY_TOTAL, veg_leg = DR2I_V_LEGUMES, oil = DR2I_OILS, pf_egg = DR2I_PF_EGGS, pf_ns = DR2I_PF_NUTSDS, pf_soy = DR2I_PF_SOY, pf_poultry = DR2I_PF_POULT, pf_redm = DR2I_PF_MEAT, pf_redm_tot = total_redmeat_new, pf_poultry_tot = total_poultry_new, pf_leg = DR2I_PF_LEGUMES, kcal = DR2IKCAL) %&gt;% mutate(sea_omega3_fa = sum(DR2IP226, DR2IP205), veg_exc_sta = sum(veg_dg, veg_ro, veg_oth), fruit_exc_juice = sum(DR2I_F_CITMLB, DR2I_F_OTHER), pf_pm = sum(DR2I_PF_CUREDMEAT, DR2I_PF_ORGAN), pf_seafood = sum(DR2I_PF_SEAFD_HI, DR2I_PF_SEAFD_LOW), leg_tot = sum(pf_leg, pf_soy), pf_animal = sum(DR2I_PF_MPS_TOTAL, pf_egg), pf_plant = sum(pf_leg, pf_ns, pf_soy)) %&gt;% ungroup() # create soy milk category foods_day2_2 &lt;- foods_day2_1 %&gt;% mutate(dairy_soy = ifelse(str_detect(DESCRIPTION, &quot;Soy milk&quot;) &amp; dairy_tot &gt; 0, dairy_tot, 0), dairy_cow = ifelse(str_detect(DESCRIPTION, &quot;Soy milk&quot;, negate = TRUE) &amp; dairy_tot &gt; 0, dairy_tot, 0)) # check foods_day2_2 %&gt;% filter(dairy_tot &gt; 0) %&gt;% select(SEQN, DESCRIPTION, dairy_tot, dairy_soy, dairy_cow) #good # export foods day 1 and day 2 for later use write_rds(foods_day1_2, &quot;data_inputs/DIET/dietary_intake/DATA/clean_data/foods_day1_clean.rds&quot;) write_rds(foods_day2_2, &quot;data_inputs/DIET/dietary_intake/DATA/clean_data/foods_day2_clean.rds&quot;) Step 3: Clean the food and nutrient intake (summary) datasets rm(list=setdiff(ls(), c(&quot;foods_day1_2&quot;, &quot;foods_day2_2&quot;))) # QUICKLY HANDLE MEAT meat_sum_day1 &lt;- foods_day1_2 %&gt;% group_by(SEQN) %&gt;% summarise(pf_redm_tot_1 = sum(pf_redm_tot), pf_poultry_tot_1 = sum(pf_poultry_tot)) meat_sum_day2 &lt;- foods_day2_2 %&gt;% group_by(SEQN) %&gt;% summarise(pf_redm_tot_2 = sum(pf_redm_tot), pf_poultry_tot_2 = sum(pf_poultry_tot)) # 2015-2016 diet data (i) # demographic data demo_i &lt;- read_sas(&quot;data_inputs/DIET/dietary_intake/DATA/raw_data/demo_i.sas7bdat&quot;) %&gt;% select(SEQN, RIAGENDR, RIDRETH1, DMDEDUC2, INDFMPIR, RIDAGEYR) # fped day 1 fped_i1 &lt;- read_sas(&quot;data_inputs/DIET/dietary_intake/DATA/raw_data/fped_dr1tot_1516.sas7bdat&quot;) # fped day 2 fped_i2 &lt;- read_sas(&quot;data_inputs/DIET/dietary_intake/DATA/raw_data/fped_dr2tot_1516.sas7bdat&quot;) # join the two datasets fped_i &lt;- left_join(fped_i1, fped_i2) # nutrients day 1 nutrient_i1 &lt;- read_sas(&quot;data_inputs/DIET/dietary_intake/DATA/raw_data/dr1tot_i.sas7bdat&quot;) # nutrients day 2 nutrient_i2 &lt;- read_sas(&quot;data_inputs/DIET/dietary_intake/DATA/raw_data/dr2tot_i.sas7bdat&quot;) # join the two datasets nutrient_i &lt;- full_join(nutrient_i1, nutrient_i2) # Combine all datasets nhanes1516 &lt;- fped_i %&gt;% left_join(nutrient_i) %&gt;% left_join(demo_i) # 2017-2018 diet data (j) # demographic data demo_j &lt;- read_sas(&quot;data_inputs/DIET/dietary_intake/DATA/raw_data/demo_j.sas7bdat&quot;) %&gt;% select(SEQN, RIAGENDR, RIDRETH1, DMDEDUC2, INDFMPIR, RIDAGEYR) # fped day 1 fped_j1 &lt;- read_sas(&quot;data_inputs/DIET/dietary_intake/DATA/raw_data/fped_dr1tot_1718.sas7bdat&quot;) # fped day 2 fped_j2 &lt;- read_sas(&quot;data_inputs/DIET/dietary_intake/DATA/raw_data/fped_dr2tot_1718.sas7bdat&quot;) # join the two datasets fped_j &lt;- left_join(fped_j1, fped_j2) # nutrients day 1 nutrient_j1 &lt;- read_sas(&quot;data_inputs/DIET/dietary_intake/DATA/raw_data/dr1tot_j.sas7bdat&quot;) # nutrients day 2 nutrient_j2 &lt;- read_sas(&quot;data_inputs/DIET/dietary_intake/DATA/raw_data/dr2tot_j.sas7bdat&quot;) # join the two datasets nutrient_j &lt;- full_join(nutrient_j1, nutrient_j2) # Combine all datasets nhanes1718 &lt;- fped_j %&gt;% left_join(nutrient_j) %&gt;% left_join(demo_j) # combine the two nhanes datasets # first, change 2 variable names that don&#39;t match nhanes1718 &lt;- nhanes1718 %&gt;% rename(DR1TWS = DR1TWSZ, DR2TWS = DR2TWSZ) nhanes_comb &lt;- rbind(nhanes1516, nhanes1718) # combine with meat nhanes_comb1 &lt;- left_join(nhanes_comb, meat_sum_day1, by = &quot;SEQN&quot;) %&gt;% left_join(meat_sum_day2, by = &quot;SEQN&quot;) # create dairy variables dairy_day1 &lt;- foods_day1_2 %&gt;% group_by(SEQN) %&gt;% summarise(dairy_cow_1 = sum(dairy_cow), dairy_soy_1 = sum(dairy_soy)) dairy_day2 &lt;- foods_day2_2 %&gt;% group_by(SEQN) %&gt;% summarise(dairy_cow_2 = sum(dairy_cow), dairy_soy_2 = sum(dairy_soy)) # merge with nhanes dairy_bothdays &lt;- full_join(dairy_day1, dairy_day2) nhanes_comb2 &lt;- nhanes_comb1 %&gt;% left_join(dairy_bothdays, by = &quot;SEQN&quot;) Step 4: Construct dietary factors nhanes_comb3 &lt;- nhanes_comb2 %&gt;% rename(kcal_1 = DR1TKCAL, kcal_2 = DR2TKCAL, sat_fat_1 = DR1TSFAT, sat_fat_2 = DR2TSFAT, sodium_1 = DR1TSODI, sodium_2 = DR2TSODI, gr_refined_1 = DR1T_G_REFINED, gr_refined_2 = DR2T_G_REFINED, gr_whole_1 = DR1T_G_WHOLE, gr_whole_2 = DR2T_G_WHOLE, added_sugar_1 = DR1T_ADD_SUGARS, added_sugar_2 = DR2T_ADD_SUGARS, fruit_tot_1 = DR1T_F_TOTAL, fruit_tot_2 = DR2T_F_TOTAL, fruit_juice_1 = DR1T_F_JUICE, fruit_juice_2 = DR2T_F_JUICE, fiber_1 = DR1TFIBE, fiber_2 = DR2TFIBE, dairy_tot_1 = DR1T_D_TOTAL, dairy_tot_2 = DR2T_D_TOTAL, veg_dg_1 = DR1T_V_DRKGR, veg_dg_2 = DR2T_V_DRKGR, veg_oth_1 = DR1T_V_OTHER, veg_oth_2 = DR2T_V_OTHER, veg_ro_1 = DR1T_V_REDOR_TOTAL, veg_ro_2 = DR2T_V_REDOR_TOTAL, veg_sta_1 = DR1T_V_STARCHY_TOTAL, veg_sta_2 = DR2T_V_STARCHY_TOTAL, # Beans, peas, and lentils (legumes) computed as vegetables (cup eq.) veg_leg_1 = DR1T_V_LEGUMES, veg_leg_2 = DR2T_V_LEGUMES, oil_1 = DR1T_OILS, oil_2 = DR2T_OILS, pf_egg_1 = DR1T_PF_EGGS, pf_egg_2 = DR2T_PF_EGGS, pf_ns_1 = DR1T_PF_NUTSDS, pf_ns_2 = DR2T_PF_NUTSDS, # soy only # Soy products, excluding calcium fortified soy milk (soymilk) # and raw soybeans products (oz. eq.) pf_soy_1 = DR1T_PF_SOY, pf_soy_2 = DR2T_PF_SOY, pf_poultry_1 = DR1T_PF_POULT, pf_poultry_2 = DR2T_PF_POULT, pf_redm_1 = DR1T_PF_MEAT, pf_redm_2 = DR2T_PF_MEAT, pf_pm_1 = DR1T_PF_CUREDMEAT, pf_pm_2 = DR2T_PF_CUREDMEAT, pf_organ_1 = DR1T_PF_ORGAN, pf_organ_2 = DR2T_PF_ORGAN, # Beans and Peas (legumes) computed as protein foods (oz. eq.) pf_leg_1 = DR1T_PF_LEGUMES, pf_leg_2 = DR2T_PF_LEGUMES) %&gt;% rowwise() %&gt;% mutate(sea_omega3_fa_1 = sum(DR1TP226, DR1TP205), sea_omega3_fa_2 = sum(DR2TP226, DR2TP205), veg_exc_sta_1 = sum(veg_dg_1, veg_ro_1, veg_oth_1), veg_exc_sta_2 = sum(veg_dg_2, veg_ro_2, veg_oth_2), fruit_exc_juice_1 = sum(DR1T_F_CITMLB, DR1T_F_OTHER), fruit_exc_juice_2 = sum(DR2T_F_CITMLB, DR2T_F_OTHER), # pf_redm_tot_1 = sum(), # pf_redm_tot_2 = sum(), # # pf_poultry_tot_1 = sum(), # pf_poultry_tot_2 = sum(), pufa_energy_1 = ((DR1TPFAT * 9) / kcal_1) * 100, pufa_energy_2 = ((DR2TPFAT * 9) / kcal_2) * 100, sfat_energy_1 = ((sat_fat_1 * 9) / kcal_1) * 100, sfat_energy_2 = ((sat_fat_2 * 9) / kcal_2) * 100, pf_seafood_1 = sum(DR1T_PF_SEAFD_HI, DR1T_PF_SEAFD_LOW), pf_seafood_2 = sum(DR2T_PF_SEAFD_HI, DR2T_PF_SEAFD_LOW), # includes legumes and soy foods leg_tot_1 = sum(pf_leg_1, pf_soy_1), leg_tot_2 = sum(pf_leg_2, pf_soy_2), pf_animal_1 = sum(DR1T_PF_MPS_TOTAL, pf_egg_1), pf_animal_2 = sum(DR2T_PF_MPS_TOTAL, pf_egg_2), pf_plant_1 = sum(pf_leg_1, pf_ns_1, pf_soy_1), pf_plant_2 = sum(pf_leg_2, pf_ns_2, pf_soy_2) ) # select the variables we need nhanes_comb4 &lt;- nhanes_comb3 %&gt;% select(SEQN, RIAGENDR, RIDRETH1, DMDEDUC2, INDFMPIR, RIDAGEYR, SDMVPSU, SDMVSTRA, WTDRD1, WTDR2D, DR1DRSTZ, DR2DRSTZ, DRDINT, ends_with(&quot;_1&quot;), ends_with(&quot;_2&quot;)) %&gt;% ungroup() # stop using rowwise Step 5: Create sociodemographic subgroups nhanes_comb5 &lt;- nhanes_comb4 %&gt;% mutate( female = ifelse(RIAGENDR == 2, 1, 0), sex = ifelse(female == 1, 1, 2), race = recode(RIDRETH1, `3` = 1, `4` = 2, `1` = 3, `2` = 3, `5` = 4), age = case_when(RIDAGEYR &gt;= 20 &amp; RIDAGEYR &lt; 35 ~ 1, RIDAGEYR &gt;= 35 &amp; RIDAGEYR &lt; 45 ~ 2, RIDAGEYR &gt;= 45 &amp; RIDAGEYR &lt; 55 ~ 3, RIDAGEYR &gt;= 55 &amp; RIDAGEYR &lt; 65 ~ 4, RIDAGEYR &gt;= 65 &amp; RIDAGEYR &lt; 75 ~ 5, RIDAGEYR &gt;= 75 ~ 6), # create new weight variable wtnew = WTDRD1/2) Step 6: Create averages of dietary factors for Day 1 and Day 2 nhanes_comb6 &lt;- nhanes_comb5 %&gt;% rowwise() %&gt;% mutate(kcal = mean(c(kcal_1, kcal_2), na.rm = TRUE), sat_fat = mean(c(sat_fat_1, sat_fat_2), na.rm = TRUE), sodium = mean(c(sodium_1, sodium_2), na.rm = TRUE), gr_refined = mean(c(gr_refined_1, gr_refined_2), na.rm = TRUE), gr_whole = mean(c(gr_whole_1, gr_whole_2), na.rm = TRUE), added_sugar = mean(c(added_sugar_1, added_sugar_2), na.rm = TRUE), fruit_tot = mean(c(fruit_tot_1, fruit_tot_2), na.rm = TRUE), fruit_exc_juice = mean(c(fruit_exc_juice_1, fruit_exc_juice_2), na.rm = TRUE), fruit_juice = mean(c(fruit_juice_1, fruit_juice_2), na.rm = TRUE), fiber = mean(c(fiber_1, fiber_2), na.rm = TRUE), dairy_tot = mean(c(dairy_tot_1, dairy_tot_2), na.rm = TRUE), dairy_cow = mean(c(dairy_cow_1, dairy_cow_2), na.rm = TRUE), dairy_soy = mean(c(dairy_soy_1, dairy_soy_2), na.rm = TRUE), veg_dg = mean(c(veg_dg_1, veg_dg_2), na.rm = TRUE), veg_oth = mean(c(veg_oth_1, veg_oth_2), na.rm = TRUE), veg_ro = mean(c(veg_ro_1, veg_ro_2), na.rm = TRUE), veg_sta = mean(c(veg_sta_1, veg_sta_2), na.rm = TRUE), veg_leg = mean(c(veg_leg_1, veg_leg_2), na.rm = TRUE), veg_exc_sta = mean(c(veg_exc_sta_1, veg_exc_sta_2), na.rm = TRUE), oil = mean(c(oil_1, oil_2), na.rm = TRUE), pf_egg = mean(c(pf_egg_1, pf_egg_2), na.rm = TRUE), pf_ns = mean(c(pf_ns_1, pf_ns_2), na.rm = TRUE), pf_soy = mean(c(pf_soy_1, pf_soy_2), na.rm = TRUE), pf_poultry = mean(c(pf_poultry_1, pf_poultry_2), na.rm = TRUE), pf_poultry_tot = mean(c(pf_poultry_tot_1, pf_poultry_tot_2), na.rm = TRUE), pf_pm = mean(c(pf_pm_1, pf_pm_2), na.rm = TRUE), pf_redm = mean(c(pf_redm_1, pf_redm_2), na.rm = TRUE), pf_redm_tot = mean(c(pf_redm_tot_1, pf_redm_tot_2), na.rm = TRUE), pf_organ = mean(c(pf_organ_1, pf_organ_2), na.rm = TRUE), pf_leg = mean(c(pf_leg_1, pf_leg_2), na.rm = TRUE), sea_omega3_fa = mean(c(sea_omega3_fa_1, sea_omega3_fa_2), na.rm = TRUE), pufa_energy = mean(c(pufa_energy_1, pufa_energy_2), na.rm = TRUE), sfat_energy = mean(c(sfat_energy_1, sfat_energy_2), na.rm = TRUE), pf_seafood = mean(c(pf_seafood_1, pf_seafood_2), na.rm = TRUE), leg_tot = mean(c(leg_tot_1, leg_tot_2), na.rm = TRUE), pf_animal = mean(c(pf_animal_1, pf_animal_2), na.rm = TRUE), pf_plant = mean(c(pf_plant_1, pf_plant_2), na.rm = TRUE)) # get rid of NaN nhanes_comb6[nhanes_comb6 == &quot;NaN&quot;] &lt;- NA # ungroup nhanes_comb7 &lt;- nhanes_comb6 %&gt;% ungroup() # Merge with subgroup file subgroups &lt;- read_csv(&quot;data_inputs/OTHER/labels/DATA/population_subgroups_48_060923_FINAL.csv&quot;) nhanes_comb8 &lt;- nhanes_comb7 %&gt;% left_join(subgroups, by = c(&quot;age&quot; = &quot;Age&quot;, &quot;sex&quot; = &quot;Sex&quot;, &quot;race&quot; = &quot;Race&quot;)) # create final dataset nhanes_final &lt;- nhanes_comb8 # look at meat variables nhanes_final %&gt;% select(SEQN, starts_with(c(&quot;pf_redm&quot;, &quot;pf_poultry&quot;, &quot;pf_pm&quot;, &quot;pf_organ&quot;))) %&gt;% mutate(sumtot = (pf_redm + pf_poultry + pf_pm + pf_organ == pf_redm_tot + pf_poultry_tot), sum1 = (pf_redm_1 + pf_poultry_1 + pf_pm_1 + pf_organ_1 == pf_redm_tot_1 + pf_poultry_tot_1), sum2 = (pf_redm_2 + pf_poultry_2 + pf_pm_2 + pf_organ_2 == pf_redm_tot_2 + pf_poultry_tot_2)) nhanes_final %&gt;% select(SEQN, starts_with(c(&quot;pf_redm&quot;, &quot;pf_poultry&quot;, &quot;pf_pm&quot;, &quot;pf_organ&quot;))) %&gt;% mutate(sum1 = (pf_redm + pf_poultry + pf_pm + pf_organ == pf_redm_tot + pf_poultry_tot)) %&gt;% filter(sum1 == &quot;FALSE&quot;) # look at day 1 nhanes_final %&gt;% rowwise() %&gt;% select(SEQN, pf_redm_1, pf_poultry_1, pf_pm_1, pf_organ_1, pf_redm_tot_1, pf_poultry_tot_1) %&gt;% mutate(sum1 = round(sum(pf_redm_1, pf_poultry_1, pf_pm_1, pf_organ_1), digits = 3), sum2 = round(sum(pf_redm_tot_1, pf_poultry_tot_1), digits = 3), my_test = (sum1 == sum2)) %&gt;% filter(my_test == &quot;FALSE&quot;) %&gt;% mutate(my_subtract = sum2 - sum1) %&gt;% filter(my_subtract &lt; -0.05 | my_subtract &gt; 0.05) # not bad # look at day2 nhanes_final %&gt;% rowwise() %&gt;% select(SEQN, pf_redm_2, pf_poultry_2, pf_pm_2, pf_organ_2, pf_redm_tot_2, pf_poultry_tot_2) %&gt;% mutate(sum1 = round(sum(pf_redm_2, pf_poultry_2, pf_pm_2, pf_organ_2), digits = 3), sum2 = round(sum(pf_redm_tot_2, pf_poultry_tot_2), digits = 3), my_test = (sum1 == sum2)) %&gt;% filter(my_test == &quot;FALSE&quot;) %&gt;% mutate(my_subtract = sum2 - sum1) %&gt;% filter(my_subtract &lt; -0.05 | my_subtract &gt; 0.05) # not bad Step 7: Examine cleaned NHANES data # check missing summary(nhanes_final) # check for outliers # kcal &lt; 500 nhanes_final %&gt;% filter(kcal_1 &lt; 500) %&gt;% nrow() #233 nhanes_final %&gt;% filter(kcal_2 &lt; 500) %&gt;% nrow() #301 # kcal &gt; 3500 nhanes_final %&gt;% filter(kcal_1 &gt; 3500) %&gt;% nrow() #1028 nhanes_final %&gt;% filter(kcal_2 &gt; 3500) %&gt;% nrow() #588 # do not remove because I will filter out # dietary recalls that are not valid later # diet recall status table(nhanes_final$DR1DRSTZ, useNA = &quot;always&quot;) table(nhanes_final$DR2DRSTZ, useNA = &quot;always&quot;) # first, create inAnalysis variable nhanes_final1 &lt;- nhanes_final %&gt;% rowwise() %&gt;% mutate( # Define sub-population of interest: # Adults aged 20+ with 1 or 2 days of reliable dietary recalls reliable_yes = ifelse((DRDINT == 1 &amp; DR1DRSTZ == 1) | (DRDINT == 2 &amp; DR1DRSTZ == 1 &amp; DR2DRSTZ == 1), 1, 0), inAnalysis = (!(is.na(subgroup)) &amp; reliable_yes == 1), # if subgroup ISN&#39;T missing and reliable data # Change NAs to 0s, otherwise svydesign function below won&#39;t run wtnew = ifelse(is.na(wtnew), 0, wtnew), SDMVPSU = ifelse(is.na(SDMVPSU), 0, SDMVPSU), SDMVSTRA = ifelse(is.na(SDMVSTRA), 0, SDMVSTRA) ) # check new survey weight nhanes_final1 %&gt;% select(SEQN, wtnew, SDMVPSU, SDMVSTRA, inAnalysis) # looks good # export write_rds(nhanes_final1, &quot;data_inputs/DIET/dietary_intake/DATA/clean_data/nhanes1518_clean.rds&quot;) Finally, the cleaned dataset is exported to use later. "],["cleaning-code.html", "Chapter 3 Cleaning Code 3.1 Create Final Data Inputs 3.2 Clean Health Datasets", " Chapter 3 Cleaning Code This chapter walks you through all of the R code used to clean the raw data inputs. The resulting cleaned datasets are then used in the modeling (see next Chapter). 3.1 Create Final Data Inputs This script imports all of raw data inputs needed for the model. Note that you must first open the ‘methods_manual’ R project before running this script or else it will not work. First, let’s set up our environment. rm(list = ls()) options(scipen=999) library(tidyverse) library(readxl) library(stringr) # check working directory getwd() Create a date string that will be appended to all data file names. my_date &lt;- paste0(&quot;_&quot;, Sys.Date(), &quot;_FINAL.csv&quot;) 3.1.1 Other Data Inputs U.S. population Just need to round the population number the nearest whole number. Then export data to FINAL folder. pop &lt;- read_xlsx(&quot;data_inputs/OTHER/us_population/DATA/NHANES 17 SUBPOPratio_0327.xlsx&quot;, sheet = &quot;final&quot;) pop1 &lt;- pop %&gt;% rename(subgroup = subgroup_id, `2018_pop` = Pop_2018) %&gt;% mutate(`2018_pop` = ceiling(`2018_pop`)) # round up to next whole number write_csv(pop1, paste0(&quot;data_inputs/FINAL/cleaned_raw_data/population_distribution&quot;, my_date)) Conversion units Just select the needed variables then export. units &lt;- read_csv(&quot;data_inputs/OTHER/unit_conversions/DATA/Unit_conversions_1.4.24.csv&quot;) units1 &lt;- units %&gt;% select(Food_group, DGA_unit, Conversion_to_grams, Equation) write_csv(units1, paste0(&quot;data_inputs/FINAL/cleaned_raw_data/unit_conversions&quot;, my_date)) Clear global environment expect for my_date. rm(list=setdiff(ls(), c(&quot;my_date&quot;))) 3.1.2 Health Data Inputs Cancer incidence Import the raw cancer data input, clean up the variable names, and calculate the standard error of the cancer counts (‘count_se’). # import cancer data cancer &lt;- read_xls(&quot;data_inputs/HEALTH/cancer_incidence/DATA/2018CANCERRATE_0327.xls&quot;, sheet = &quot;2018pop&quot;) cancer1 &lt;- cancer %&gt;% select(subgroup_id, cancer_code_ICD_O_3, Crude_Rate, Standard_Error, `_2018_pop`, No_2018) %&gt;% rename(crude_rate = Crude_Rate, crude_se = Standard_Error, count = No_2018, population = `_2018_pop`, subgroup = subgroup_id, diseases = cancer_code_ICD_O_3) %&gt;% mutate(count_se = (crude_se / 100000) * population) Recode the cancer labels as shorter abbreviations. cancer2 &lt;- cancer1 %&gt;% mutate(diseases = recode(diseases, &quot;All Sites&quot; = &quot;ALL&quot;, &quot;Colon and Rectum&quot; = &quot;CC&quot;, &quot;Corpus Uteri&quot; = &quot;UC&quot;, &quot;Esophagus&quot; = &quot;ECA&quot;, &quot;Breast&quot; = &quot;BC&quot;, &quot;Gallbladder&quot; = &quot;GC&quot;, &quot;Kidney and Renal Pelvis&quot; = &quot;KC&quot;, &quot;Liver and Intrahepatic Bile Duct&quot; = &quot;LVC&quot;, &quot;Lung and Bronchus&quot; = &quot;LC&quot;, &quot;myeloma&quot; = &quot;MMC&quot;, &quot;Ovary&quot; = &quot;OC&quot;, &quot;Pancreas&quot; = &quot;PC&quot;, &quot;prostate(advanced)&quot; = &quot;APCA&quot;, &quot;stomach_cardia&quot; = &quot;SCC&quot;, &quot;stomach_noncar&quot; = &quot;SCNC&quot;, &quot;Thyroid&quot; = &quot;TC&quot;, &quot;oral cavity and pharynx and larynx&quot; = &quot;MLPC&quot;)) Round the count values to the nearest whole number. cancer3 &lt;- cancer2 %&gt;% mutate(population = ceiling(population), count = ceiling(count), count_se = ceiling(count_se)) %&gt;% arrange(diseases, subgroup) Lastly, merge with population subsgroup information and cancer labels. # import subgroups info subgrps &lt;- read_csv(&quot;data_inputs/OTHER/labels/DATA/population_subgroups_48_060923_FINAL.csv&quot;) # join with cancer data cancer4 &lt;- left_join(cancer3, subgrps, by = &quot;subgroup&quot;) # import cancer label data dis_labels &lt;- read_csv(&quot;data_inputs/OTHER/labels/DATA/disease_outcomes_060923_FINAL.csv&quot;) %&gt;% select(outcome, outcome_label) cancer5 &lt;- left_join(cancer4, dis_labels, by = c(&quot;diseases&quot; = &quot;outcome&quot;)) %&gt;% rename(diseases_label = outcome_label) %&gt;% relocate(diseases_label, .after = diseases) If the rate or standard error variable are missing, then replace with 0. Lastly, export the cleaned file to the “FINAL” folder. cancer6 &lt;- cancer5 %&gt;% mutate(crude_rate = ifelse(is.na(crude_rate), 0, crude_rate), crude_se = ifelse(is.na(crude_se), 0, crude_se), count_se = ifelse(is.na(count_se), 0, count_se)) # export final dataset write_csv(cancer6, paste0(&quot;data_inputs/FINAL/cleaned_raw_data/cancer_incidence&quot;, my_date)) Cardiovascular disease (CVD) mortaliaty Import raw CVD data and tidy. cvd &lt;- read_xlsx(&quot;data_inputs/HEALTH/cvd_mortality/DATA/CVDmotality2018_11022023.xlsx&quot;, sheet = &quot;merge&quot;) cvd1 &lt;- cvd %&gt;% select(cause, subgroup_id, Deaths, Deaths_se) %&gt;% rename(subgroup = subgroup_id) %&gt;% mutate(deaths_rounded = ceiling(Deaths), deaths_se_rounded = ceiling(Deaths_se)) # look at outcome labels unique(cvd1$cause) # need to rename diabetes cvd2 &lt;- cvd1 %&gt;% mutate(cause = recode(cause, &quot;DM&quot; = &quot;DIAB&quot;)) %&gt;% select(-c(Deaths, Deaths_se)) Transform the mean and SE data from long to wide format and then rejoin. # just mean death values cvd_wide_mean &lt;- pivot_wider(cvd2 %&gt;% select(-deaths_se_rounded), names_from = cause, values_from = deaths_rounded) # just se death values cvd_wide_se &lt;- pivot_wider(cvd2 %&gt;% select(-deaths_rounded), names_from = cause, values_from = deaths_se_rounded, names_prefix = &quot;se_&quot;) # merge cvd_wide &lt;- left_join(cvd_wide_mean, cvd_wide_se, by = &quot;subgroup&quot;) Join with population subgroup information. # get rid of NA row cvd_wide1 &lt;- cvd_wide %&gt;% filter(!(is.na(subgroup))) # merge with cvd data cvd_final &lt;- left_join(cvd_wide1, subgrps, by = &quot;subgroup&quot;) %&gt;% relocate(subgroup, Age, Age_label, Sex, Sex_label, Race, Race_label) Create the BMI-mediated and SBP-mediated variables by simply setting them equal to the cvd death values. This is needed for the model code to work properly later. cvd_final1 &lt;- cvd_final %&gt;% mutate( # BMI AA_medBMI = AA, se_AA_medBMI = se_AA, AFF_medBMI = AFF, se_AFF_medBMI = se_AFF, CM_medBMI = CM, se_CM_medBMI = se_CM, DIAB_medBMI = DIAB, se_DIAB_medBMI = se_DIAB, ENDO_medBMI = ENDO, se_ENDO_medBMI = se_ENDO, HHD_medBMI = HHD, se_HHD_medBMI = se_HHD, HSTK_medBMI = HSTK, se_HSTK_medBMI = se_HSTK, IHD_medBMI = IHD, se_IHD_medBMI = se_IHD, ISTK_medBMI = ISTK, se_ISTK_medBMI = se_ISTK, OSTK_medBMI = OSTK, se_OSTK_medBMI = se_OSTK, OTH_medBMI = OTH, se_OTH_medBMI = se_OTH, PVD_medBMI = PVD, se_PVD_medBMI = se_PVD, RHD_medBMI = RHD, se_RHD_medBMI = se_RHD, TSTK_medBMI = TSTK, se_TSTK_medBMI = se_TSTK, # SBP AA_medSBP = AA, se_AA_medSBP = se_AA, AFF_medSBP = AFF, se_AFF_medSBP = se_AFF, CM_medSBP = CM, se_CM_medSBP = se_CM, DIAB_medSBP = DIAB, se_DIAB_medSBP = se_DIAB, ENDO_medSBP = ENDO, se_ENDO_medSBP = se_ENDO, HHD_medSBP = HHD, se_HHD_medSBP = se_HHD, HSTK_medSBP = HSTK, se_HSTK_medSBP = se_HSTK, IHD_medSBP = IHD, se_IHD_medSBP = se_IHD, ISTK_medSBP = ISTK, se_ISTK_medSBP = se_ISTK, OSTK_medSBP = OSTK, se_OSTK_medSBP = se_OSTK, OTH_medSBP = OTH, se_OTH_medSBP = se_OTH, PVD_medSBP = PVD, se_PVD_medSBP = se_PVD, RHD_medSBP = RHD, se_RHD_medSBP = se_RHD, TSTK_medSBP = TSTK, se_TSTK_medSBP = se_TSTK) Export to FINAL folder. write_csv(cvd_final1, paste0(&quot;data_inputs/FINAL/cleaned_raw_data/cvd_mortality&quot;, my_date)) Other health data Import other health datsets. weight &lt;- read_xls(&quot;data_inputs/HEALTH/overweight_prevalence/DATA/overweight1518_48grp_04.10.23.xls&quot;) hbp &lt;- read_xls(&quot;data_inputs/HEALTH/systolic_blood_pressure/DATA/SBP_1718_04192023.xls&quot;, sheet = &quot;HBPbyGRP&quot;) sbp &lt;- read_xls(&quot;data_inputs/HEALTH/systolic_blood_pressure/DATA/SBP_1718_04192023.xls&quot;, sheet = &quot;over20yr&quot;) #high sbp variables highSBP &lt;- read_xlsx(&quot;data_inputs/HEALTH/systolic_blood_pressure/DATA/highSBP_data.xlsx&quot;) Create non-Hipsanic Black (NHB) variables. oth_health &lt;- weight %&gt;% mutate(nhb = ifelse(Race_label == &quot;NHB&quot;, 1, 0), nhb_se = 0) %&gt;% rename(overweight_rate = Percent, overweight_rate_se = StdErr) %&gt;% select(subgroup, overweight_rate, overweight_rate_se, nhb, nhb_se) The SBP data is at the participant-level so it needs to be summarized at population subgroup level. sbp1 &lt;- sbp %&gt;% filter(!(is.na(mean_sbp))) # only include those with non-missing mean_sbp value # summarize by subgroup ID sbp_vars &lt;- sbp1 %&gt;% group_by(subgroup_id) %&gt;% summarise(sbp_mean = mean(mean_sbp), # calculate standard error sbp_se = sd(mean_sbp)/sqrt(length(mean_sbp))) # merge with highSBP highSBP1 &lt;- highSBP %&gt;% select(subgroup_id, Percent, StdErr) %&gt;% rename(highSBP_rate = Percent, highSBP_rate_se = StdErr) sbp_vars1 &lt;- left_join(sbp_vars, highSBP1, by = &quot;subgroup_id&quot;) # merge sbp vars with oth_health oth_health1 &lt;- left_join(oth_health, sbp_vars1, by = c(&quot;subgroup&quot; = &quot;subgroup_id&quot;)) # hbp variables hbp1 &lt;- hbp %&gt;% rename(hbp = Percent, hbp_se = StdErr) %&gt;% mutate(hbp = hbp/100, hbp_se = hbp_se/100) %&gt;% select(subgroup_id, hbp, hbp_se) # merge hbp vars with oth_health oth_health2 &lt;- left_join(oth_health1, hbp1, by = c(&quot;subgroup&quot; = &quot;subgroup_id&quot;)) Export to FINAL folder. write_csv(oth_health2, paste0(&quot;data_inputs/FINAL/cleaned_raw_data/other_health&quot;, my_date)) Effect sizes for diet and body mass index (BMI) No changes are needed so just import the file then export to FINAL folder. bmi_effects &lt;- read_csv(&quot;data_inputs/HEALTH/effect_sizes_dietfactor_bmi/DATA/food_to_BMI_effects_from_Dari_1.5.24.csv&quot;) write_csv(bmi_effects, paste0(&quot;data_inputs/FINAL/cleaned_raw_data/food_to_bmi_effects&quot;, my_date)) Effect sizes for diet and systolic blood pressure (SBP) No changes are needed so just import the file then export to FINAL folder. sbp_effects &lt;- read_csv(&quot;data_inputs/HEALTH/effect_sizes_dietfactor_sbp/DATA/food_to_sbp_effects_NOT_converted_1.5.24.csv&quot;) write_csv(sbp_effects, paste0(&quot;data_inputs/FINAL/cleaned_raw_data/food_to_sbp_effects&quot;, my_date)) Relative risks (RR) for BMI and cancer No changes are needed so just import the file then export to FINAL folder. bmi_cancer &lt;- read_csv(&quot;data_inputs/HEALTH/rr_bmi_cancer/DATA/RR_BMI_cancer_11.23.22.csv&quot;) write_csv(bmi_cancer, paste0(&quot;data_inputs/FINAL/cleaned_raw_data/rr_bmi_cancer&quot;, my_date)) Relative risks (RR) for BMI and CVD No changes are needed so just import the file then export to FINAL folder. bmi_cvd &lt;- read_csv(&quot;data_inputs/HEALTH/rr_bmi_cvd/DATA/RR_BMI_cvd_3.2.23.csv&quot;) write_csv(bmi_cvd, paste0(&quot;data_inputs/FINAL/cleaned_raw_data/rr_bmi_cvd&quot;, my_date)) Relative risks (RR) for SBP and CVD No changes are needed so just import the file then export to FINAL folder. sbp_cvd &lt;- read_csv(&quot;data_inputs/HEALTH/rr_sbp_cvd/DATA/RR_sbp_cvd_2.16.23.csv&quot;) write_csv(sbp_cvd, paste0(&quot;data_inputs/FINAL/cleaned_raw_data/rr_sbp_cvd&quot;, my_date)) Log relative risks (LogRR) for diet-CVD No changes are needed so just import the file then export to FINAL folder. rm(list=ls(pattern=&quot;^cvd&quot;)) cvd &lt;- read_csv(&quot;data_inputs/HEALTH/logrr_dietfactor_disease/DATA/logRR_diet_cvd_byage_1.26.24.csv&quot;) write_csv(cvd, paste0(&quot;data_inputs/FINAL/cleaned_raw_data/logRR_diet_cvd&quot;, my_date)) Log relative risks (LogRR) for diet-cancer No changes are needed so just import the file then export to FINAL folder. rm(list=ls(pattern=&quot;^cancer&quot;)) cancer &lt;- read_csv(&quot;data_inputs/HEALTH/logrr_dietfactor_disease/DATA/logRR_diet_cancer_1.5.24.csv&quot;) write_csv(cancer, paste0(&quot;data_inputs/FINAL/cleaned_raw_data/logRR_diet_cancer&quot;, my_date)) TMRED Import the TMRED values (in grams). Then, import the conversion units and join with the TMRED data. tmred_g &lt;- read_csv(&quot;data_inputs/HEALTH/tmred/DATA/TMRED_grams_1.5.24.csv&quot;) # import conversion units conversion &lt;- read_csv(paste0(&quot;data_inputs/FINAL/cleaned_raw_data/unit_conversions&quot;, my_date)) # join with tmred dataset tmred_dga &lt;- left_join(tmred_g, conversion, by = c(&quot;Risk_factor&quot; = &quot;Food_group&quot;)) Then, transform the TMRED mean and standard deviation values from grams to “FPED units” (i.e., cups or ounces). tmred_dga1 &lt;- tmred_dga %&gt;% mutate(tmred_dga_units = TMRED / Conversion_to_grams, sd_dga_units = SD / Conversion_to_grams) tmred_dga2 &lt;- tmred_dga1 %&gt;% select(Risk_factor, tmred_dga_units, sd_dga_units, DGA_unit) %&gt;% rename(TMRED = tmred_dga_units, SD = sd_dga_units, Unit = DGA_unit) %&gt;% mutate(TMRED = signif(TMRED, 3), # round to 3 sig figs SD = signif(SD, 3), # round to 3 sig figs Unit = str_sub(Unit, start = 3)) # fix unit var Then, export the conversion units in both grams and FPED units to be used later. # export grams dataset write_csv(tmred_g, paste0(&quot;data_inputs/FINAL/cleaned_raw_data/tmred_grams&quot;, my_date)) # export FPED units write_csv(tmred_dga2, paste0(&quot;data_inputs/FINAL/cleaned_raw_data/tmred_dga_units&quot;, my_date)) Clear global environment expect for my_date. rm(list=setdiff(ls(), c(&quot;my_date&quot;))) 3.1.3 Diet Data Inputs Dietary intake Import the NHANES diet intake dataset and clean up. nhanes &lt;- read_csv(&quot;data_inputs/DIET/dietary_intake/DATA/output_data_from_cluster/NHANES_1518_summary_allfoods_adj_bysub_ncimethod_07-08-2024.csv&quot;) nhanes1 &lt;- nhanes %&gt;% rename(&quot;Foodgroup&quot; = &quot;food&quot;, &quot;Mean_Intake&quot; = &quot;mean&quot;, &quot;SE_Intake&quot; = &quot;SE&quot;, &quot;Food_label&quot; = &quot;food_label&quot;, &quot;Food_desc&quot; = &quot;food_desc&quot;) %&gt;% mutate(Food_label = ifelse(Foodgroup == &quot;kcal&quot;, &quot;Kilocalorires&quot;, Food_label), Food_desc = ifelse(Foodgroup == &quot;kcal&quot;, &quot;Energy (kcal)&quot;, Food_desc)) %&gt;% select(-c(starts_with(c(&quot;gro_&quot;, &quot;oth_&quot;)))) Then, convert the sugar sweetened beverage (SSB) mean and standard error from grams to cup (8 fl oz). nhanes2 &lt;- nhanes1 %&gt;% # Divide by 240 to go from grams to cup mutate(Mean_Intake = ifelse(Foodgroup == &quot;ssb&quot;, Mean_Intake/240, Mean_Intake), SE_Intake = ifelse(Foodgroup == &quot;ssb&quot;, SE_Intake/240, SE_Intake), Food_desc = ifelse(Foodgroup == &quot;ssb&quot;, &quot;Sugar sweetened beverages (1 cup [8 fl oz])&quot;, Food_desc)) nhanes3 &lt;- nhanes2 %&gt;% arrange(Foodgroup, subgroup) Lastly, rename the standard deviation variable and then export. # rename stddev nhanes4 &lt;- nhanes3 %&gt;% rename(sigma_u_wgt = StdDev) %&gt;% mutate(sigma_u_wgt = ifelse(Foodgroup == &quot;ssb&quot;, sigma_u_wgt/240, sigma_u_wgt)) %&gt;% relocate(sigma_u_wgt, .after = &quot;SE_Intake&quot;) # export write_csv(nhanes4, paste0(&quot;data_inputs/FINAL/cleaned_raw_data/nhanes1518_agesexrace&quot;, my_date)) Counterfactual intake No changes are needed so just import the file then export to FINAL folder. cf &lt;- read_csv(&quot;data_inputs/DIET/counterfactual_intake/DATA/counterfactual_intake_050724.csv&quot;) write_csv(cf, paste0(&quot;data_inputs/FINAL/cleaned_raw_data/counterfactual_intake&quot;, my_date)) 3.2 Clean Health Datasets This script cleans all of the health-related data inputs needed for the model. Note that you must first open the ‘methods_manual’ R project before running this script or else it will not work. First, let’s set up our environment. rm(list = ls()) options(scipen=999) library(tidyverse) library(readxl) library(stringr) # check working directory getwd() Create a date string that will be appended to all data file names. my_date &lt;- paste0(&quot;_&quot;, Sys.Date(), &quot;_FINAL.csv&quot;) There are 13 health-related datasets that we will clean. 3.2.1 (1) Cancer incidence and (2) CVD mortality In the code below, these two datasets get restructured and merged together into one “disease” dataset. # import cvd mortality dataset cvd &lt;- read_csv(paste0(&quot;data_inputs/FINAL/cleaned_raw_data/cvd_mortality&quot;, my_date)) cancer &lt;- read_csv(paste0(&quot;data_inputs/FINAL/cleaned_raw_data/cancer_incidence&quot;, my_date)) # transform to long format (without se for now) cvd_long_mean &lt;- cvd %&gt;% select(-starts_with(&quot;se_&quot;)) %&gt;% pivot_longer(cols = !(c(subgroup, Age, Age_label, Sex, Sex_label, Race, Race_label)), names_to = &quot;diseases&quot;, values_to = &quot;count&quot;) # just do se now cvd_long_se &lt;- cvd %&gt;% select(subgroup, Age, Age_label, Sex, Sex_label, Race, Race_label, starts_with(&quot;se_&quot;)) %&gt;% pivot_longer(cols = !(c(subgroup, Age, Age_label, Sex, Sex_label, Race, Race_label)), names_to = &quot;diseases&quot;, values_to = &quot;count_se&quot;) %&gt;% mutate(diseases = gsub(&quot;se_&quot;, &quot;&quot;, diseases)) # combine cvd_long &lt;- left_join(cvd_long_mean, cvd_long_se, by = c(&quot;subgroup&quot;, &quot;Age&quot;, &quot;Age_label&quot;, &quot;Sex&quot;, &quot;Sex_label&quot;, &quot;Race&quot;, &quot;Race_label&quot;, &quot;diseases&quot;)) # any missing? cvd_long %&gt;% filter(is.na(count) | is.na(count_se)) #none-good # remove some vars from cancer dataset cancer1 &lt;- cancer %&gt;% select(-c(diseases_label, # Sex_label, Age_label, Race_label, crude_rate, population, crude_se)) # bind cvd and cancer datasets together cvd_cancer_merged &lt;- rbind(cvd_long, cancer1) %&gt;% rename(crude_se = count_se) cvd_cancer_merged1 &lt;- cvd_cancer_merged %&gt;% arrange(diseases, subgroup) # read in population distribution pop &lt;- read_csv(paste0(&quot;data_inputs/FINAL/cleaned_raw_data/population_distribution&quot;, my_date)) cvd_cancer_merged2 &lt;- left_join(cvd_cancer_merged1, pop, by = &quot;subgroup&quot;) %&gt;% rename(population = `2018_pop`) # export merged dataset write_csv(cvd_cancer_merged2, paste0(&quot;data_inputs/FINAL/model_data/cvd_cancer_merged&quot;, my_date)) Then, we continue cleaning this merged disease dataset that is later appended to the NHANES dataset. # FYI - this function is stored in the LASTING Github repo # This function was written by Fred source(&quot;/Users/bmb73/Documents/GitHub/LASTING/Code/swap.r&quot;) raw.file &lt;- cvd_cancer_merged2 # remove all cancers and total stroke outcome categories raw.file &lt;- raw.file %&gt;% filter(diseases != &quot;ALL&quot; &amp; diseases != &quot;TSTK&quot;) # remove BMImed and SBPmed for now index &lt;- grep(pattern=&quot;_medBMI|_medSBP&quot;, x=raw.file$diseases) raw.file &lt;- raw.file[-index,] # Fix Sex var raw.file$Sex &lt;- factor(raw.file$Sex) raw.file$SexTemp &lt;- as.character(raw.file$Sex) raw.file$SexTemp &lt;- as.factor(raw.file$SexTemp) # set SE raw.file$se &lt;- raw.file$crude_se # rename disease raw.file &lt;- raw.file %&gt;% rename(&quot;disease&quot; = &quot;diseases&quot;) vars.to.keep &lt;- c(&quot;disease&quot;, &quot;subgroup&quot;, &quot;Sex&quot;, &quot;Age_label&quot;, &quot;Race_label&quot;, &quot;count&quot;, &quot;se&quot;) mort &lt;- raw.file[,vars.to.keep] mort.wide &lt;- reshape(mort, timevar=&quot;disease&quot;, idvar=c(&quot;subgroup&quot;, &quot;Sex&quot;, &quot;Age_label&quot;, &quot;Race_label&quot;), direction=&quot;wide&quot;) for(i in 5:dim(mort.wide)[2]) { mort.wide[,i][is.na(mort.wide[,i])]&lt;-0 } mort.wide$agecat &lt;- as.numeric(as.factor(mort.wide$Age_label)) mort.wide$female &lt;- swap(as.numeric(mort.wide$Sex)-1, from=c(0,1), to=c(1,0)) mort.wide$race &lt;- swap(as.numeric(as.factor(mort.wide$Race_label)), from=c(1,2,3,4), to=c(3,2,1,4)) mort.wide$racecat &lt;- mort.wide$race names(mort.wide)[grep(pattern=&quot;count&quot;, x=names(mort.wide))] &lt;- paste(gsub(pattern=&quot;count.&quot;, replacement=&quot;&quot;, x=names(mort.wide)[grep(pattern=&quot;count&quot;, x=names(mort.wide))]), &quot;mn&quot;, sep=&quot;&quot;) names(mort.wide)[grep(pattern=&quot;se&quot;, x=names(mort.wide))] &lt;- paste(gsub(pattern=&quot;se.&quot;, replacement=&quot;&quot;, x=names(mort.wide)[grep(pattern=&quot;se&quot;, x=names(mort.wide))]), &quot;se&quot;, sep=&quot;&quot;) ideal.order &lt;- c(&quot;subgroup&quot;, &quot;agecat&quot;, &quot;female&quot;, &quot;race&quot;, &quot;Age_label&quot;, &quot;Sex&quot;, &quot;Race_label&quot;, names(mort.wide)[grep(pattern=&quot;mn&quot;, x=names(mort.wide))], names(mort.wide)[grep(pattern=&quot;se&quot;, x=names(mort.wide))]) mort.wide &lt;- mort.wide[,ideal.order] medBMI &lt;- mort.wide[, c(names(mort.wide)[grep(pattern=&quot;mn&quot;, x=names(mort.wide))], names(mort.wide)[grep(pattern=&quot;se&quot;, x=names(mort.wide))])] names(medBMI)[grep(pattern=&quot;mn&quot;, names(medBMI))] &lt;- gsub(pattern=&quot;mn&quot;, replacement=&quot;_medBMImn&quot;, x=names(medBMI[grep(pattern=&quot;mn&quot;, names(medBMI))])) names(medBMI)[grep(pattern=&quot;se&quot;, names(medBMI))] &lt;- gsub(pattern=&quot;se&quot;, replacement=&quot;_medBMIse&quot;, x=names(medBMI[grep(pattern=&quot;se&quot;, names(medBMI))])) medSBP &lt;- mort.wide[, c(names(mort.wide)[grep(pattern=&quot;mn&quot;, x=names(mort.wide))], names(mort.wide)[grep(pattern=&quot;se&quot;, x=names(mort.wide))])] names(medSBP)[grep(pattern=&quot;mn&quot;, names(medSBP))] &lt;- gsub(pattern=&quot;mn&quot;, replacement=&quot;_medSBPmn&quot;, x=names(medSBP[grep(pattern=&quot;mn&quot;, names(medSBP))])) names(medSBP)[grep(pattern=&quot;se&quot;, names(medSBP))] &lt;- gsub(pattern=&quot;se&quot;, replacement=&quot;_medSBPse&quot;, x=names(medSBP[grep(pattern=&quot;se&quot;, names(medSBP))])) mort.wide &lt;- cbind(mort.wide, medBMI, medSBP) new.ideal.order &lt;- c(&quot;subgroup&quot;, &quot;agecat&quot;, &quot;female&quot;, &quot;race&quot;, &quot;Age_label&quot;, &quot;Sex&quot;, &quot;Race_label&quot;, names(mort.wide)[grep(pattern=&quot;mn&quot;, x=names(mort.wide))], names(mort.wide)[grep(pattern=&quot;se&quot;, x=names(mort.wide))]) mort.wide &lt;- mort.wide[,new.ideal.order] mort.wide &lt;- mort.wide[order(mort.wide$agecat, mort.wide$female, mort.wide$race),] mort.wide &lt;- mort.wide %&gt;% arrange(subgroup) # export to FINAL folder write_csv(mort.wide, paste0(&quot;data_inputs/FINAL/cleaned_data/disease_incidence&quot;, my_date)) 3.2.2 (3) Effect sizes for diet and BMI and (4) diet and SBP Clean up the global environment. rm(list=setdiff(ls(), &quot;my_date&quot;)) First, import the effect sizes for diet and BMI. ef &lt;- read_csv(paste0(&quot;data_inputs/FINAL/cleaned_raw_data/food_to_bmi_effects&quot; , my_date)) We need to convert the effect sizes for four dietary factors: pf_pm, pf_redm, added_sugar, and leg_tot. The current unit for pf_redm (red meat) is 3.5 oz eq/day, and needs to be transformed to 1 oz eq/day. So, we will divide the effects and standard errors by 3.5. The current unit for pf_pm (processed meat) is 2 oz eq/day, and needs to be transformed to 1 oz eq/day. So, we will divide the effects and standard errors by 2. The current unit for added_sugar is 1 gram/day, and needs to be transformed to 1 tsp/day. So, we will multiple the effects and standard errors by 4.2 (1 tsp=4.2 g). The current unit for leg_tot is 1 cup/day, and needs to be transformed to 1 oz/day. So, we will multiple the effects and standard errors by (175/44). ef_new &lt;- ef %&gt;% mutate( # effects for normal weight effect_normal_mean_converted = ifelse(food_group == &quot;pf_redm&quot; | food_group == &quot;pf_redm_tot&quot;, effect_normal_mean / 3.5, ifelse(food_group == &quot;pf_pm&quot;, effect_normal_mean / 2, ifelse(food_group == &quot;added_sugar&quot;, effect_normal_mean * 4.2, ifelse(food_group == &quot;leg_tot&quot;, effect_normal_mean * (175/44), effect_normal_mean)))), effect_normal_mean_se_converted = ifelse(food_group == &quot;pf_redm&quot; | food_group == &quot;pf_redm_tot&quot;, effect_normal_mean_se / 3.5, ifelse(food_group == &quot;pf_pm&quot;, effect_normal_mean_se / 2, ifelse(food_group == &quot;added_sugar&quot;, effect_normal_mean_se * 4.2, ifelse(food_group == &quot;leg_tot&quot;, effect_normal_mean_se * (175/44), effect_normal_mean_se)))), # effects for overweight effect_overweight_mean_converted = ifelse(food_group == &quot;pf_redm&quot; | food_group == &quot;pf_redm_tot&quot;, effect_overweight_mean / 3.5, ifelse(food_group == &quot;pf_pm&quot;, effect_overweight_mean / 2, ifelse(food_group == &quot;added_sugar&quot;, effect_overweight_mean * 4.2, ifelse(food_group == &quot;leg_tot&quot;, effect_overweight_mean * (175/44), effect_overweight_mean)))), effect_overweight_mean_se_converted = ifelse(food_group == &quot;pf_redm&quot; | food_group == &quot;pf_redm_tot&quot;, effect_overweight_mean_se / 3.5, ifelse(food_group == &quot;pf_pm&quot;, effect_overweight_mean_se / 2, ifelse(food_group == &quot;added_sugar&quot;, effect_overweight_mean_se * 4.2, ifelse(food_group == &quot;leg_tot&quot;, effect_overweight_mean_se * (175/44), effect_overweight_mean_se)))) ) %&gt;% rename(&quot;effect_unit_converted&quot; = nhanes_unit) # look at original and converted values ef_new_sub &lt;- ef_new %&gt;% select(food_group, effect_normal_mean, effect_normal_mean_converted, effect_normal_mean_se, effect_normal_mean_se_converted, effect_unit, effect_overweight_mean, effect_overweight_mean_converted, effect_overweight_mean_se, effect_overweight_mean_se_converted, effect_unit_converted) Now, create the file that is used in the CRA model. Select relevant variables and rename variables. ef_model_dat &lt;- ef_new %&gt;% select(food_group, effect_normal_mean_converted, effect_normal_mean_se_converted, effect_overweight_mean_converted, effect_overweight_mean_se_converted, effect_unit_converted) %&gt;% rename(&quot;effect_normal_mean&quot; = effect_normal_mean_converted, &quot;effect_normal_mean_se&quot; = effect_normal_mean_se_converted, &quot;effect_overweight_mean&quot; = effect_overweight_mean_converted, &quot;effect_overweight_mean_se&quot; = effect_overweight_mean_se_converted, &quot;effect_unit&quot; = effect_unit_converted) # export to model folder write_csv(ef_model_dat, paste0(&quot;data_inputs/FINAL/model_data/food_to_bmi_effects_converted&quot;, my_date)) Next, import the effect sizes for diet and SBP. sbp_ef &lt;- read_csv(paste0(&quot;data_inputs/FINAL/cleaned_raw_data/food_to_sbp_effects&quot;, my_date)) There is only one effect size that needs to be fixed: sodium. The unit of the sodium-sbp effect size is currently mmHg/(1000mg/day). Therefore, the effect size needs to be divided by 1000 to get the unit mmHg/(1mg/day). #divide columns 2-9 by 1000 idx &lt;- c(2:ncol(sbp_ef)) sbp_ef[,idx] &lt;- sbp_ef[,idx] / 1000 # Update the effect size unit label sbp_ef_model_dat &lt;- sbp_ef %&gt;% mutate(effect_unit = ifelse(food_group == &quot;sodium&quot;, &quot;1 mg/day&quot;, NA)) # export to TEMP folder write_csv(sbp_ef_model_dat, paste0(&quot;data_inputs/FINAL/model_data/food_to_sbp_effects_converted&quot;, my_date)) 3.2.3 (5) RRs for BMI and cancer and (6) for BMI and CVD No unit conversions need to be made, so we just need to join the files and export. rm(list=setdiff(ls(), &quot;my_date&quot;)) # import data bmi_cancer &lt;- read_csv(paste0(&quot;data_inputs/FINAL/cleaned_raw_data/rr_bmi_cancer&quot;, my_date)) bmi_cvd &lt;- read_csv(paste0(&quot;data_inputs/FINAL/cleaned_raw_data/rr_bmi_cvd&quot;, my_date)) # join 2 bmi datasets bmi_join &lt;- left_join(bmi_cvd, bmi_cancer, by = c(&quot;risk_factor&quot;, &quot;subgroup&quot;)) # export to cleaned data folder write_csv(bmi_join, paste0(&quot;data_inputs/FINAL/cleaned_data/rr_bmi_disease&quot;, my_date)) 3.2.4 (7) LogRRs for diet and cancer and (8) for diet and CVD 3.2.4.1 Part (i): Create LogRR dataset The goal is to create a mega file that contains all diet and disease combinations (for all 48 subgroups). rm(list=setdiff(ls(), &quot;my_date&quot;)) # Retrieve list of disease outcomes disease_dat &lt;- read_csv(&quot;data_inputs/OTHER/labels/DATA/disease_outcomes_060923_FINAL.csv&quot;) disease_outcomes &lt;- c(disease_dat$outcome) disease_labels &lt;- c(disease_dat$outcome_label) # Retrieve list of dietary factors diet_dat &lt;- read_csv(&quot;data_inputs/OTHER/labels/DATA/dietary_factors_060923_FINAL.csv&quot;) diet_factors &lt;- c(diet_dat$Food_group) # Retrieve population subgroups pop_dat &lt;- read_csv(&quot;data_inputs/OTHER/labels/DATA/population_subgroups_48_060923_FINAL.csv&quot;) pop_dat1 &lt;- pop_dat %&gt;% select(subgroup, Age, Sex, Race) # Number of population subgroups subgroup_num &lt;- 1:48 my_list &lt;- list() for (i in diet_factors) { dat &lt;- tibble( #subgroup=1, outcome=disease_outcomes, #outcome_label=disease_labels, risk_factor=i) my_list[[i]] &lt;- dat } dat_bind &lt;- bind_rows(my_list) #second loop my_list1 &lt;- list() for (j in subgroup_num) { dat_bind_more &lt;- dat_bind %&gt;% mutate(subgroup = j) my_list1[[j]] &lt;- dat_bind_more } final_dat &lt;- bind_rows(my_list1) # Left join with pop dataset final_dat1 &lt;- final_dat %&gt;% left_join(pop_dat1, by = &quot;subgroup&quot;) # JOIN WITH CVD AND CANCER DATASETS # Retrieve cvd dataset cvd_real &lt;- read_csv(paste0(&quot;data_inputs/FINAL/cleaned_raw_data/logRR_diet_cvd&quot;, my_date)) %&gt;% select(-c(outcome_label, Age_label)) # join with final_dat1 join1 &lt;- left_join(final_dat1, cvd_real, by = c(&quot;outcome&quot;, &quot;risk_factor&quot;, &quot;Age&quot;)) # test join1 %&gt;% filter(outcome == &quot;OSTK&quot; &amp; risk_factor == &quot;fruit_tot&quot;) %&gt;% View() # looks good # Retrieve cancer dataset cancer_real &lt;- read_csv(paste0(&quot;data_inputs/FINAL/cleaned_raw_data/logRR_diet_cancer&quot;, my_date)) %&gt;% select(-c(outcome_label, RR, CI_lower, CI_upper, evidence)) %&gt;% mutate(logRR_se = (logCI_upper - logCI_lower) / 3.92) # join with join1 join2 &lt;- left_join(final_dat1, cancer_real, by = c(&quot;outcome&quot;, &quot;risk_factor&quot;)) # test join2 %&gt;% filter(outcome == &quot;CC&quot; &amp; risk_factor == &quot;dairy_tot&quot;) %&gt;% View() #good join2 %&gt;% filter(outcome == &quot;CC&quot; &amp; risk_factor == &quot;dairy_cow&quot;) %&gt;% View() #good join2 %&gt;% filter(outcome == &quot;CC&quot; &amp; risk_factor == &quot;dairy_soy&quot;) %&gt;% View() #good join2 %&gt;% filter(outcome == &quot;MLPC&quot; &amp; risk_factor == &quot;fruit_tot&quot;) %&gt;% View() #good # need to merge join1 and join2 # get rid of rows where rr=na join1_sub &lt;- join1 %&gt;% filter(!(is.na(logRR))) join2_sub &lt;- join2 %&gt;% filter(!(is.na(logRR))) # combine these datasets # need to reconcile variable names join2_sub &lt;- join2_sub %&gt;% select(-c(logCI_lower, logCI_upper)) my_join &lt;- rbind(join1_sub, join2_sub) # lastly, join with final_dat1 template big_join &lt;- left_join(final_dat1, my_join, by=NULL) # retrieve conversion units for diet factors convert &lt;- read_csv(paste0(&quot;data_inputs/FINAL/cleaned_raw_data/unit_conversions&quot;, my_date)) # fill in NA values with logRR = 0 big_join1 &lt;- big_join %&gt;% mutate(logRR = ifelse(is.na(logRR), 0, logRR)) # merge with convert big_join2 &lt;- left_join(big_join1, convert, by = c(&quot;risk_factor&quot; = &quot;Food_group&quot;)) # calculate RR unit if RR is missing big_join3 &lt;- big_join2 %&gt;% mutate(RR_unit = ifelse(is.na(RR_unit), paste0(DGA_unit, &quot;/day&quot;), RR_unit)) # reorder columns big_join4 &lt;- big_join3 %&gt;% relocate(subgroup, Age, Sex, Race) %&gt;% arrange(subgroup, outcome) # export write_csv(big_join4, paste0(&quot;data_inputs/FINAL/cleaned_data/logRR_diet_disease&quot;, my_date)) # look at just the non-missing RRs join_subset &lt;- big_join4 %&gt;% filter(logRR != 0) # export write_csv(join_subset, paste0(&quot;data_inputs/FINAL/cleaned_data/logRR_diet_disease_SUBSET&quot;, my_date)) 3.2.4.2 Part (ii): Convert LogRR Units Now we need to convert the units of the LogRR dataset we just created. rm(list=setdiff(ls(), &quot;my_date&quot;)) # Read in diet-disease file rr &lt;- read_csv(paste0(&quot;data_inputs/FINAL/cleaned_data/logRR_diet_disease&quot;, my_date), col_types = &quot;ddddccddccdc&quot;) %&gt;% select(-c(Age, Sex, Race)) # create variable that contains the numeric value of the original unit rr &lt;- rr %&gt;% mutate(RR_unit_num = parse_number(RR_unit), unit_type = sub(&quot;.*/&quot;, &quot;&quot;, RR_unit)) # fix &quot;day&quot; rr &lt;- rr %&gt;% mutate(unit_type = ifelse(unit_type == &quot;d&quot;, &quot;day&quot;, unit_type)) table(rr$unit_type, useNA = &quot;always&quot;) # Function 1: Day function # Use this function when we need to convert the RR unit from /week to /day day_func &lt;- function(x, y, u){ # x=dataset # y=dietary factor name # u=newly converted unit x %&gt;% split(list(x$risk_factor, x$unit_type)) %&gt;% modify_at(paste0(y, &quot;.wk&quot;), ~mutate(., logRR = logRR * 7, logRR_se = logRR_se * 7, RR_unit = paste0(RR_unit_num, &quot; &quot;, u), unit_type = &quot;day&quot;)) %&gt;% bind_rows() } # test day_func(x=rr, y=&quot;pf_redm&quot;, u=&quot;g/day&quot;) %&gt;% filter(risk_factor==&quot;pf_redm&quot; &amp; logRR != 0) %&gt;% View() # apply to the RRs that are in week unit rr %&gt;% filter(unit_type == &quot;wk&quot;) %&gt;% select(risk_factor) %&gt;% distinct() # pf_ns, pf_redm, pf_pm, pf_seafood rr1 &lt;- rr %&gt;% day_func(y=&quot;pf_ns&quot;, u=&quot;oz eq/day&quot;) %&gt;% day_func(y=&quot;pf_redm&quot;, u=&quot;g/day&quot;) %&gt;% day_func(y=&quot;pf_redm_tot&quot;, u=&quot;g/day&quot;) %&gt;% day_func(y=&quot;pf_pm&quot;, u=&quot;g/day&quot;) %&gt;% day_func(y=&quot;pf_seafood&quot;, u=&quot;g/day&quot;) # check rr1 %&gt;% filter(risk_factor==&quot;pf_seafood&quot; &amp; logRR != 0) %&gt;% View() #good rr1 %&gt;% filter(risk_factor==&quot;pf_redm_tot&quot; &amp; logRR != 0) %&gt;% View() #good # Function 2: Convert function # Use this function when we need to convert the RR unit to a different type of unit (e.g., grams to cup, grams to oz) convert_func &lt;- function(x, y){ # x=dataset # y=dietary factor name # z=conversion factor # u=newly converted unit x %&gt;% split(~risk_factor == paste0(y)) %&gt;% modify_at(&quot;TRUE&quot;, ~mutate(., RR_converted = (logRR / RR_unit_num) * Conversion_to_grams, SE_converted = (logRR_se / RR_unit_num) * Conversion_to_grams, RR_unit_converted = paste0(DGA_unit, &quot;/&quot;, unit_type) )) %&gt;% bind_rows() } # test rr1 %&gt;% convert_func(y=&quot;pf_poultry&quot;) %&gt;% filter(risk_factor==&quot;pf_poultry&quot;) %&gt;% View() rr1 %&gt;% convert_func(y=&quot;dairy&quot;) %&gt;% filter(risk_factor==&quot;dairy&quot;) %&gt;% View() rr1 %&gt;% convert_func(y=&quot;fruit_juice&quot;) %&gt;% filter(risk_factor==&quot;fruit_juice&quot;) %&gt;% View() # APPLY FUNCTION TO DIET FACTORS rr2 &lt;- rr1 %&gt;% # RRs exist # grams to cups or oz convert_func(y=&quot;dairy_tot&quot;) %&gt;% convert_func(y=&quot;dairy_cow&quot;) %&gt;% convert_func(y=&quot;dairy_soy&quot;) %&gt;% convert_func(y=&quot;fruit_tot&quot;) %&gt;% convert_func(y=&quot;fruit_exc_juice&quot;) %&gt;% convert_func(y=&quot;veg_exc_sta&quot;) %&gt;% convert_func(y=&quot;gr_whole&quot;) %&gt;% convert_func(y=&quot;leg_tot&quot;) %&gt;% convert_func(y=&quot;pf_pm&quot;) %&gt;% convert_func(y=&quot;pf_redm&quot;) %&gt;% convert_func(y=&quot;pf_redm_tot&quot;) %&gt;% convert_func(y=&quot;pf_seafood&quot;) %&gt;% # RRs don&#39;t exist convert_func(y=&quot;pf_poultry&quot;) %&gt;% convert_func(y=&quot;pf_poultry_tot&quot;) %&gt;% convert_func(y=&quot;pf_egg&quot;) %&gt;% convert_func(y=&quot;pf_leg&quot;) %&gt;% convert_func(y=&quot;pf_soy&quot;) %&gt;% convert_func(y=&quot;fruit_juice&quot;) %&gt;% convert_func(y=&quot;veg_dg&quot;) %&gt;% convert_func(y=&quot;veg_leg&quot;) %&gt;% convert_func(y=&quot;veg_oth&quot;) %&gt;% convert_func(y=&quot;veg_ro&quot;) %&gt;% convert_func(y=&quot;veg_sta&quot;) %&gt;% convert_func(y=&quot;added_sugar&quot;) %&gt;% convert_func(y=&quot;gr_refined&quot;) %&gt;% convert_func(y=&quot;oil&quot;) %&gt;% convert_func(y=&quot;sodium&quot;) %&gt;% # conversion factors don&#39;t exist # and we&#39;re not using these dietary factors for the CRA anyway convert_func(y=&quot;pf_animal&quot;) %&gt;% convert_func(y=&quot;pf_plant&quot;) %&gt;% convert_func(y=&quot;babyfood&quot;) %&gt;% convert_func(y=&quot;coffee_tea&quot;) %&gt;% convert_func(y=&quot;other&quot;) %&gt;% convert_func(y=&quot;water&quot;) # check rr2 %&gt;% filter(risk_factor==&quot;leg_tot&quot; &amp; RR_converted !=0) %&gt;% View() rr2 %&gt;% filter(risk_factor==&quot;sodium&quot;) %&gt;% View() rr2 %&gt;% filter(risk_factor==&quot;water&quot;) %&gt;% View() # Function 3: Divide function # Use this function when we need to scale down the RR unit (e.g., 100 mg to 1 mg) divide_func &lt;- function(x, y){ # x=dataset # y=dietary factor name # u=newly converted unit x %&gt;% split(~risk_factor == paste0(y)) %&gt;% modify_at(&quot;TRUE&quot;, ~mutate(., RR_converted = logRR / RR_unit_num, SE_converted = logRR_se / RR_unit_num, RR_unit_converted = paste0(DGA_unit, &quot;/&quot;, unit_type) )) %&gt;% bind_rows() } # APPLY rr3 &lt;- rr2 %&gt;% # scale down units divide_func(y=&quot;sea_omega3_fa&quot;) %&gt;% # want to get unit 1 mg/day divide_func(y=&quot;fiber&quot;) %&gt;% # want to get unit 1 g/day divide_func(y=&quot;pufa_rep_carb&quot;) %&gt;% # want to get unit 1%E/day divide_func(y=&quot;pufa_rep_sfa&quot;) %&gt;% # want to get unit 1%E/day divide_func(y=&quot;pufa_rep_carbsfa&quot;) %&gt;% # want to get unit 1%E/day divide_func(y=&quot;sat_fat&quot;) # want to get unit 1%E/day # check rr3 %&gt;% filter(risk_factor==&quot;sea_omega3_fa&quot; &amp; RR_converted !=0) %&gt;% View() rr3 %&gt;% filter(risk_factor==&quot;fiber&quot; &amp; RR_converted !=0) %&gt;% View() # Function 4: No changes needed # Use this function when the unit is already correct nochange_func &lt;- function(x, y){ # x=dataset # y=dietary factor name # u=newly converted unit x %&gt;% split(~risk_factor == paste0(y)) %&gt;% modify_at(&quot;TRUE&quot;, ~mutate(., RR_converted = logRR, SE_converted = logRR_se , RR_unit_converted = paste0(DGA_unit, &quot;/&quot;, unit_type))) %&gt;% bind_rows() } # APPLY rr4 &lt;- rr3 %&gt;% # no changes needed nochange_func(y=&quot;ssb&quot;) %&gt;% nochange_func(y=&quot;pf_ns&quot;) # check rr4 %&gt;% filter(risk_factor==&quot;ssb&quot; &amp; RR_converted !=0) %&gt;% View() rr4 %&gt;% filter(risk_factor==&quot;pf_ns&quot; &amp; RR_converted !=0) %&gt;% View() # determine if any RRs have not been converted yet rr4 %&gt;% filter(is.na(RR_converted)) %&gt;% select(risk_factor) %&gt;% unique() #none-good # rearrange the data by subgroup and outcome rr5 &lt;- rr4 %&gt;% arrange(subgroup, outcome) # now create full dataset for the model # need to rename variable names rr6 &lt;- rr5 %&gt;% select(-c(RR_unit, logRR, logRR_se, Conversion_to_grams, RR_unit_num, unit_type, DGA_unit, Equation)) %&gt;% rename(&quot;RR&quot; = RR_converted, &quot;SE&quot; = SE_converted, &quot;RR_unit&quot; = RR_unit_converted) # if rr is 0, then set se=0 rr7 &lt;- rr6 %&gt;% mutate(SE = ifelse(RR == 0, 0, SE)) # export to TEMP folder write_csv(rr7, paste0(&quot;data_inputs/FINAL/cleaned_data/logRR_diet_disease_converted&quot;, my_date)) 3.2.5 (9) RRs for SBP and CVD rm(list=setdiff(ls(), &quot;my_date&quot;)) No conversions need to be made to the RRs for SBP and CVD, but we do need to merge and reformat all of the RRs into one file. raw.RRs &lt;- read_csv(paste0(&quot;data_inputs/FINAL/cleaned_data/logRR_diet_disease_converted&quot;, my_date)) # need to rename 2 vars raw.RRs &lt;- raw.RRs %&gt;% rename(&quot;logRR&quot; = RR, &quot;logRRse&quot; = SE) # remove TSTK rows raw.RRs &lt;- raw.RRs %&gt;% filter(outcome != &quot;TSTK&quot;) n.diseases &lt;- length(unique(raw.RRs$outcome)) vars.to.keep &lt;- c(&quot;subgroup&quot;,&quot;risk_factor&quot;, &quot;outcome&quot;, &quot;logRR&quot;, &quot;logRRse&quot;) raw.RRs &lt;- raw.RRs[,vars.to.keep] # this is better way to do it food.names &lt;- unique(raw.RRs$risk_factor) # at this point, all of the units are 1 RR_unit &lt;- rep(1, length(food.names)) disease.names &lt;- as.character(unique(raw.RRs$outcome)) disease.names.se &lt;- paste(disease.names, &quot;se&quot;, sep=&quot;&quot;) col.names.main &lt;- as.vector(rbind(disease.names, disease.names.se)) RRs.wide &lt;- pivot_wider(raw.RRs, names_from = &quot;outcome&quot;, values_from = c(&quot;logRR&quot;, &quot;logRRse&quot;), names_sep = &quot;.&quot;) RRs.wide[is.na(RRs.wide)] &lt;- 0 # renaming to columns to make consistent with old names from CVD papers names(RRs.wide)[grep(pattern=&quot;logRRse.&quot;, x=names(RRs.wide))] &lt;- paste(gsub(pattern=&quot;logRRse.&quot;, replacement=&quot;&quot;, x=names(RRs.wide)[grep(pattern=&quot;logRRse.&quot;, x=names(RRs.wide))]), replacement=&quot;se&quot;, sep=&quot;&quot;) names(RRs.wide) &lt;- gsub(pattern=&quot;logRR.&quot;, replacement=&quot;&quot;, x=names(RRs.wide)) names(RRs.wide)[names(RRs.wide)==&quot;risk_factor&quot;] &lt;- &quot;RF&quot; RRs.wide$RRunit &lt;- 0 for(i in 1:length(food.names)) { RRs.wide$RRunit[RRs.wide$RF==food.names[i]] &lt;- RR_unit[i] } RRs.wide&lt;-RRs.wide[order(RRs.wide$RF, RRs.wide$subgroup),] # Now let&#39;s move on to mediated effects, that is effects of BMI on sex, and effects of BMI on disease.names.BMImed &lt;- paste(disease.names, &quot;_medBMI&quot;, sep=&quot;&quot;) disease.names.BMImed.se &lt;- paste(disease.names.BMImed, &quot;se&quot;, sep=&quot;&quot;) col.names.BMI &lt;- as.vector(rbind(disease.names.BMImed, disease.names.BMImed.se)) BMI_RRs&lt;-read.csv(paste0(&quot;data_inputs/FINAL/cleaned_data/rr_bmi_disease&quot;, my_date)) BMI_RRs &lt;- BMI_RRs %&gt;% select(-c(ALL, ALLse)) new.order &lt;- c(&quot;risk_factor&quot;,&quot;subgroup&quot;, as.vector(rbind(disease.names, disease.names.se))) BMI_RRs &lt;- BMI_RRs[,new.order[new.order %in% names(BMI_RRs)]] current.bmi.colnames &lt;- names(BMI_RRs)[3:(length(names(BMI_RRs)))] for(i in grep(&quot;se&quot;, current.bmi.colnames)) { names(BMI_RRs)[2+i] &lt;- paste(strsplit(current.bmi.colnames[i], split=&quot;se&quot;), &quot;_medBMI&quot;, &quot;se&quot;, sep=&quot;&quot;) names(BMI_RRs)[2+i-1] &lt;- paste(names(BMI_RRs)[2+i-1], &quot;_medBMI&quot;, sep=&quot;&quot;) } BMI_RRs&lt;-BMI_RRs[order(BMI_RRs$risk_factor,BMI_RRs$subgroup),] # effects of SBP on disease disease.names.SBPmed &lt;- paste(disease.names, &quot;_medSBP&quot;, sep=&quot;&quot;) disease.names.SBPmed.se &lt;- paste(disease.names.SBPmed, &quot;se&quot;, sep=&quot;&quot;) col.names.SBP &lt;- as.vector(rbind(disease.names.SBPmed, disease.names.SBPmed.se)) # This dataset didn&#39;t need any changes # so it&#39;s in the raw data folder SBP_RRs &lt;- read.csv(paste0(&quot;data_inputs/FINAL/cleaned_raw_data/rr_sbp_cvd&quot;, my_date)) new.order &lt;- c(&quot;risk_factor&quot;,&quot;subgroup&quot;, as.vector(rbind(disease.names, disease.names.se))) SBP_RRs &lt;- SBP_RRs[,new.order[new.order %in% names(SBP_RRs)]] current.sbp.colnames &lt;- names(SBP_RRs)[3:(length(names(SBP_RRs)))] for(i in grep(&quot;se&quot;, current.sbp.colnames)) { names(SBP_RRs)[2+i] &lt;- paste(strsplit(current.sbp.colnames[i], split=&quot;se&quot;), &quot;_medSBP&quot;, &quot;se&quot;, sep=&quot;&quot;) names(SBP_RRs)[2+i-1] &lt;- paste(names(SBP_RRs)[2+i-1], &quot;_medSBP&quot;, sep=&quot;&quot;) } SBP_RRs &lt;- SBP_RRs[order(SBP_RRs$risk_factor,SBP_RRs$subgroup),] # remove risk factor var SBP_RRs &lt;- SBP_RRs %&gt;% select(-risk_factor) BMI_RRs &lt;- BMI_RRs %&gt;% select(-risk_factor) allRRs &lt;- Reduce(function(x, y) merge(x, y, by.x=&quot;subgroup&quot;), list(RRs.wide, BMI_RRs, SBP_RRs)) allRRs &lt;- allRRs[order(allRRs$RF, allRRs$subgroup), ] # export write_csv(allRRs, paste0(&quot;data_inputs/FINAL/model_data/rr_agesexrace&quot;, my_date)) 3.2.6 (10) Current intake (NHANES), (11) TMRED, (14) Counterfactual, and (12) Other health data Other health data includes overweight rate, average SBP, % with hypertension, and high SBP rate. The other health dataset does not need to be changed, but it needs to be merged with the NHANES dataset. rm(list=setdiff(ls(), &quot;my_date&quot;)) # import nhanes.dat &lt;- read_csv(paste0(&quot;data_inputs/FINAL/cleaned_raw_data/nhanes1518_agesexrace&quot;, my_date)) # rename var nhanes.dat1 &lt;- nhanes.dat %&gt;% rename(diet = Foodgroup, mean = Mean_Intake, se = SE_Intake, #n = N, #intake_unit = IntakeUnit, diet_label = Food_label) # sea_omega3_fa is in grams and we want it in milligrams # first, look at data nhanes.dat1 %&gt;% filter(diet == &quot;ssb&quot;) %&gt;% View() #this is fine nhanes.dat1 %&gt;% filter(diet == &quot;sea_omega3_fa&quot;) %&gt;% View() # fix sea_omega3_fa # g -&gt; mg # 1 g = 1000 mg nhanes.dat2 &lt;- nhanes.dat1 %&gt;% split(~diet == &quot;sea_omega3_fa&quot;) %&gt;% modify_at(&quot;TRUE&quot;, ~mutate(., mean = mean * 1000, se = se * 1000, sigma_u_wgt = sigma_u_wgt * 1000)) %&gt;% bind_rows() # look at data # nhanes.dat2 %&gt;% filter(diet == &quot;ssb&quot;) %&gt;% View() nhanes.dat2 %&gt;% filter(diet == &quot;sea_omega3_fa&quot;) %&gt;% View() # read in counterfactual data counterfactuals &lt;- read_csv(paste0(&quot;data_inputs/FINAL/cleaned_raw_data/counterfactual_intake&quot;, my_date)) # rename vars counterfactuals &lt;- counterfactuals %&gt;% rename(diet = food_group, CF_intake_unit = intake_units) %&gt;% select(diet, diet_pattern, CF_mean_intake, CF_se_intake, CF_sd_intake, CF_intake_unit) # manually fix some of the units # added sugar (g -&gt; tsp) # pf_leg (cup -&gt; oz) counterfactuals1 &lt;- counterfactuals %&gt;% mutate(#added sugar CF_mean_intake = round(ifelse(diet == &quot;added_sugar&quot;, CF_mean_intake / 4.2, CF_mean_intake), digits = 2), CF_sd_intake = round(ifelse(diet == &quot;added_sugar&quot;, CF_sd_intake / 4.2, CF_sd_intake), digits = 3), CF_intake_unit = ifelse(diet == &quot;added_sugar&quot;, &quot;tsp eq/day&quot;, CF_intake_unit), # pf_leg CF_mean_intake = round(ifelse(diet == &quot;pf_leg&quot;, CF_mean_intake * 4, CF_mean_intake), digits = 2), CF_sd_intake = round(ifelse(diet == &quot;pf_leg&quot;, CF_sd_intake * 4, CF_sd_intake), digits = 3), CF_intake_unit = ifelse(diet == &quot;pf_leg&quot;, &quot;ounce eq/day&quot;, CF_intake_unit)) # read in TMRED data tmred &lt;- read_csv(paste0(&quot;data_inputs/FINAL/cleaned_raw_data/tmred_dga_units&quot;, my_date)) # rename vars tmred &lt;- tmred %&gt;% rename(TMRED_mean_intake = TMRED, TMRED_sd_intake = SD, TMRED_intake_unit = Unit) # read in death data deaths.dat &lt;- read_csv(paste0(&quot;data_inputs/FINAL/cleaned_data/disease_incidence&quot;, my_date)) # read in other health data other_healh &lt;- read_csv(paste0(&quot;data_inputs/FINAL/cleaned_raw_data/other_health&quot;, my_date)) # merge nhanes and counterfactual dat1 &lt;- left_join(nhanes.dat2, counterfactuals1, by = &quot;diet&quot;) # check pf_seafood to make sure all 5 dietary patterns were merged dat1 %&gt;% filter(diet == &quot;pf_seafood&quot;) %&gt;% select(subgroup, diet, diet_pattern, CF_mean_intake) %&gt;% View() #looks good # merge dat1 with tmred dat2 &lt;- left_join(dat1, tmred, by = c(&quot;diet&quot; = &quot;Risk_factor&quot;)) # merge dat2 with other health data dat3 &lt;- left_join(dat2, other_healh, by = &quot;subgroup&quot;) # lastly, merge with deaths data merged &lt;- left_join(dat3, deaths.dat, by = &quot;subgroup&quot;) # create merged file merged1 &lt;- merged %&gt;% arrange(diet, subgroup, diet_pattern) %&gt;% relocate(c(agecat, Age_label, female, Sex, race, Race_label), .after = subgroup) # check data merged1 %&gt;% select(subgroup, overweight_rate) %&gt;% View() # export file write_csv(merged1, paste0(&quot;data_inputs/FINAL/model_data/nhanes1518_agesexrace_merged&quot;, my_date)) "],["model-code.html", "Chapter 4 Model Code", " Chapter 4 Model Code This is a placeholder. "],["model-output-1.html", "Chapter 5 Model Output", " Chapter 5 Model Output This is a placeholder. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
