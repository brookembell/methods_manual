[["cleaning-code-for-nhanes-diet-data.html", "Chapter 3 Cleaning Code for NHANES Diet Data 3.1 Processed and Organ Meat 3.2 Clean Raw NHANES Data 3.3 Create Sugar Sweetened Beverage (SSB) Variables 3.4 Energy Adjustement 3.5 Calculating Standard Deviations Using SAS Macros", " Chapter 3 Cleaning Code for NHANES Diet Data This chapter walks you through all of code used to clean the raw NHANES dietary intake datasets. 3.1 Processed and Organ Meat To start, we need to disaggregate “procecessed meat” into “processed red meat” and “processed poultry’ categories. We need this because the environmental impact factors don’t take”processed” into consideration, so we’ll need to eventually create new food groups for the environment model (“total red meat” and “total poultry”, which include both unprocessed and processed meat). This is done using a SAS MACRO written by the USDA, located here: data_inputs/DIET/dietary_intake/CODE/0. Processed Meat Categories NHANES day 1_revised_121123.sas This code produces four SAS datasets: meat_day1.sas7bdat meat_day1_sum.sas7bdat meat_day2.sas7bdat meat_day2_sum.sas7bdat We also have to disaggregate the organ meat food codes into “red meat” or “poultry” categories. I manually mapped various FNDDS codes that represented organ meats to either “red meat” or “poultry”. The mapping is here: methods_manual/data_inputs/DIET/dietary_intake/DATA/raw_data/meat/organ_meats_bothdays_mapped_121323.csv Then, I merged this mapping with the processed meat data. library(tidyverse) library(haven) rm(list = ls()) # read in meat data meat_day1 &lt;- read_sas(&quot;data_inputs/DIET/dietary_intake/DATA/clean_data/meat_day1.sas7bdat&quot;) meat_day2 &lt;- read_sas(&quot;data_inputs/DIET/dietary_intake/DATA/clean_data/meat_day2.sas7bdat&quot;) # read in organ mapping new_organ &lt;- read_csv(&quot;data_inputs/DIET/dietary_intake/DATA/raw_data/meat/organ_meats_bothdays_mapped_121323.csv&quot;) # DAY 1 ----- meat_day1_1 &lt;- meat_day1 %&gt;% filter(!(is.na(SEQN))) %&gt;% select(SEQN, DESCRIPTION, FOODCODE, DR1ILINE, DR1IGRMS, DR1I_PF_ORGAN, total_redmeat, total_poultry) %&gt;% arrange(SEQN, DR1ILINE) # filter to organ intake &gt; 0 meat_day1_1 %&gt;% filter(DR1I_PF_ORGAN &gt; 0) # join with day1 meat_day1_2 &lt;- left_join(meat_day1_1, new_organ, by = &quot;DESCRIPTION&quot;) meat_day1_3 &lt;- meat_day1_2 %&gt;% rowwise() %&gt;% mutate(new = ifelse(is.na(new), &quot;No change&quot;, new), total_redmeat_new = ifelse(new == &quot;pf_redm&quot;, total_redmeat + DR1I_PF_ORGAN, total_redmeat), total_poultry_new = ifelse(new == &quot;pf_poultry&quot;, total_poultry + DR1I_PF_ORGAN, total_poultry)) %&gt;% select(SEQN, DR1ILINE, total_redmeat_new, total_poultry_new) # export write_rds(meat_day1_3, &quot;data_inputs/DIET/dietary_intake/DATA/clean_data/meat_day1.rds&quot;) # DAY 2 ----- meat_day2_1 &lt;- meat_day2 %&gt;% filter(!(is.na(SEQN))) %&gt;% select(SEQN, DESCRIPTION2, FOODCODE2, DR2ILINE, DR2IGRMS, DR2I_PF_ORGAN, total_redmeat_day2, total_poultry_day2) %&gt;% arrange(SEQN, DR2ILINE) meat_day2_1 %&gt;% filter(DR2I_PF_ORGAN &gt; 0) # join with day2 meat_day2_2 &lt;- left_join(meat_day2_1, new_organ, by = c(&quot;DESCRIPTION2&quot; = &quot;DESCRIPTION&quot;)) meat_day2_3 &lt;- meat_day2_2 %&gt;% rowwise() %&gt;% mutate(new = ifelse(is.na(new), &quot;No change&quot;, new), total_redmeat_new = ifelse(new == &quot;pf_redm&quot;, total_redmeat_day2 + DR2I_PF_ORGAN, total_redmeat_day2), total_poultry_new = ifelse(new == &quot;pf_poultry&quot;, total_poultry_day2 + DR2I_PF_ORGAN, total_poultry_day2)) %&gt;% select(SEQN, DR2ILINE, total_redmeat_new, total_poultry_new) # export write_rds(meat_day2_3, &quot;data_inputs/DIET/dietary_intake/DATA/clean_data/meat_day2.rds&quot;) 3.2 Clean Raw NHANES Data Now that I have dealt with processed and organ meat, I can start to clean the raw NHANES data. We use data from the 2015-2016 and 2017-2018 cycles. Step 1: Set up workspace rm(list=ls()) # load packages library(foreign) library(survey) library(tidyverse) library(psych) library(haven) library(readxl) Step 2: Clean individual-level food intake datasets # 2015-2016 diet data (i) # foods day 1 foods_i1_nutrients &lt;- read_sas(&quot;data_inputs/DIET/dietary_intake/DATA/raw_data/dr1iff_i.sas7bdat&quot;) foods_i1_whole &lt;- read_sas(&quot;data_inputs/DIET/dietary_intake/DATA/raw_data/fped_dr1iff_1516.sas7bdat&quot;) # join foods_i1 &lt;- left_join(foods_i1_whole, foods_i1_nutrients) %&gt;% mutate(nhanes_cycle = &quot;2015-2016&quot;) # foods day 2 foods_i2_nutrients &lt;- read_sas(&quot;data_inputs/DIET/dietary_intake/DATA/raw_data/dr2iff_i.sas7bdat&quot;) foods_i2_whole &lt;- read_sas(&quot;data_inputs/DIET/dietary_intake/DATA/raw_data/fped_dr2iff_1516.sas7bdat&quot;) # join foods_i2 &lt;- left_join(foods_i2_whole, foods_i2_nutrients) %&gt;% mutate(nhanes_cycle = &quot;2015-2016&quot;) # 2017-2018 diet data (j) # foods day 1 foods_j1_nutrients &lt;- read_sas(&quot;data_inputs/DIET/dietary_intake/DATA/raw_data/dr1iff_j.sas7bdat&quot;) foods_j1_whole &lt;- read_sas(&quot;data_inputs/DIET/dietary_intake/DATA/raw_data/fped_dr1iff_1718.sas7bdat&quot;) #join foods_j1 &lt;- left_join(foods_j1_whole, foods_j1_nutrients) %&gt;% mutate(nhanes_cycle = &quot;2017-2018&quot;) # foods day 2 foods_j2_nutrients &lt;- read_sas(&quot;data_inputs/DIET/dietary_intake/DATA/raw_data/dr2iff_j.sas7bdat&quot;) foods_j2_whole &lt;- read_sas(&quot;data_inputs/DIET/dietary_intake/DATA/raw_data/fped_dr2iff_1718.sas7bdat&quot;) # join foods_j2 &lt;- left_join(foods_j2_whole, foods_j2_nutrients) %&gt;% mutate(nhanes_cycle = &quot;2017-2018&quot;) # create day 1 and 2 datasets foods_day1 &lt;- rbind(foods_i1, foods_j1) %&gt;% mutate(foodsource = ifelse(DR1FS == 1, &quot;Grocery&quot;, &quot;Other&quot;), # create food source variable foodsource = replace_na(foodsource, &quot;Other&quot;), # replace NAs with &quot;other&quot; (applies to tap water and breast milk) dayrec = 1) # day1 foods_day2 &lt;- rbind(foods_i2, foods_j2) %&gt;% mutate(foodsource = ifelse(DR2FS == 1, &quot;Grocery&quot;, &quot;Other&quot;), # create food source variable foodsource = replace_na(foodsource, &quot;Other&quot;), # replace NAs with &quot;other&quot; (applies to tap water and breast milk) dayrec = 2) # read in meat data meat_day1 &lt;- read_rds(&quot;data_inputs/DIET/dietary_intake/DATA/clean_data/meat_day1.rds&quot;) meat_day2 &lt;- read_rds(&quot;data_inputs/DIET/dietary_intake/DATA/clean_data/meat_day2.rds&quot;) foods_day1_ &lt;- left_join(foods_day1, meat_day1, by = c(&quot;SEQN&quot;, &quot;DR1ILINE&quot;)) foods_day2_ &lt;- left_join(foods_day2, meat_day2, by = c(&quot;SEQN&quot;, &quot;DR2ILINE&quot;)) # check foods_day1_ %&gt;% select(SEQN, DR1ILINE, DR1I_PF_MPS_TOTAL, DR1I_PF_SEAFD_HI, DR1I_PF_SEAFD_LOW, total_redmeat_new, total_poultry_new) foods_day1_ %&gt;% filter(DR1I_PF_ORGAN &gt; 0) %&gt;% select(SEQN, DR1ILINE, DR1I_PF_MPS_TOTAL, DR1I_PF_SEAFD_HI, DR1I_PF_SEAFD_LOW, total_redmeat_new, total_poultry_new) # Calculate amount of intake for each dietary factor # for day 1 and day 2 # by SEQN and foodsource # first need to create diet variables that are combinations of 2+ vars # day 1 foods_day1_1 &lt;- foods_day1_ %&gt;% rowwise() %&gt;% rename(sat_fat = DR1ISFAT, p_fat = DR1IPFAT, sodium = DR1ISODI, gr_refined = DR1I_G_REFINED, gr_whole = DR1I_G_WHOLE, added_sugar = DR1I_ADD_SUGARS, fruit_tot = DR1I_F_TOTAL, fruit_juice = DR1I_F_JUICE, fiber = DR1IFIBE, dairy_tot = DR1I_D_TOTAL, veg_dg = DR1I_V_DRKGR, veg_oth = DR1I_V_OTHER, veg_ro = DR1I_V_REDOR_TOTAL, veg_sta = DR1I_V_STARCHY_TOTAL, veg_leg = DR1I_V_LEGUMES, oil = DR1I_OILS, pf_egg = DR1I_PF_EGGS, pf_ns = DR1I_PF_NUTSDS, pf_soy = DR1I_PF_SOY, pf_poultry = DR1I_PF_POULT, pf_redm = DR1I_PF_MEAT, pf_redm_tot = total_redmeat_new, pf_poultry_tot = total_poultry_new, pf_leg = DR1I_PF_LEGUMES, kcal = DR1IKCAL) %&gt;% mutate(sea_omega3_fa = sum(DR1IP226, DR1IP205), veg_exc_sta = sum(veg_dg, veg_ro, veg_oth), fruit_exc_juice = sum(DR1I_F_CITMLB, DR1I_F_OTHER), pf_pm = sum(DR1I_PF_CUREDMEAT, DR1I_PF_ORGAN), pf_seafood = sum(DR1I_PF_SEAFD_HI, DR1I_PF_SEAFD_LOW), leg_tot = sum(pf_leg, pf_soy), # doesn&#39;t include soy milk? pf_animal = sum(DR1I_PF_MPS_TOTAL, pf_egg), pf_plant = sum(pf_leg, pf_ns, pf_soy)) %&gt;% ungroup() # create soy milk category foods_day1_2 &lt;- foods_day1_1 %&gt;% mutate(dairy_soy = ifelse(str_detect(DESCRIPTION, &quot;Soy milk&quot;) &amp; dairy_tot &gt; 0, dairy_tot, 0), dairy_cow = ifelse(str_detect(DESCRIPTION, &quot;Soy milk&quot;, negate = TRUE) &amp; dairy_tot &gt; 0, dairy_tot, 0)) # check foods_day1_2 %&gt;% filter(dairy_tot &gt; 0) %&gt;% select(SEQN, DESCRIPTION, dairy_tot, dairy_soy, dairy_cow) #good # day 2 foods_day2_1 &lt;- foods_day2_ %&gt;% rowwise() %&gt;% rename(sat_fat = DR2ISFAT, p_fat = DR2IPFAT, sodium = DR2ISODI, gr_refined = DR2I_G_REFINED, gr_whole = DR2I_G_WHOLE, added_sugar = DR2I_ADD_SUGARS, fruit_tot = DR2I_F_TOTAL, fruit_juice = DR2I_F_JUICE, fiber = DR2IFIBE, dairy_tot = DR2I_D_TOTAL, veg_dg = DR2I_V_DRKGR, veg_oth = DR2I_V_OTHER, veg_ro = DR2I_V_REDOR_TOTAL, veg_sta = DR2I_V_STARCHY_TOTAL, veg_leg = DR2I_V_LEGUMES, oil = DR2I_OILS, pf_egg = DR2I_PF_EGGS, pf_ns = DR2I_PF_NUTSDS, pf_soy = DR2I_PF_SOY, pf_poultry = DR2I_PF_POULT, pf_redm = DR2I_PF_MEAT, pf_redm_tot = total_redmeat_new, pf_poultry_tot = total_poultry_new, pf_leg = DR2I_PF_LEGUMES, kcal = DR2IKCAL) %&gt;% mutate(sea_omega3_fa = sum(DR2IP226, DR2IP205), veg_exc_sta = sum(veg_dg, veg_ro, veg_oth), fruit_exc_juice = sum(DR2I_F_CITMLB, DR2I_F_OTHER), pf_pm = sum(DR2I_PF_CUREDMEAT, DR2I_PF_ORGAN), pf_seafood = sum(DR2I_PF_SEAFD_HI, DR2I_PF_SEAFD_LOW), leg_tot = sum(pf_leg, pf_soy), pf_animal = sum(DR2I_PF_MPS_TOTAL, pf_egg), pf_plant = sum(pf_leg, pf_ns, pf_soy)) %&gt;% ungroup() # create soy milk category foods_day2_2 &lt;- foods_day2_1 %&gt;% mutate(dairy_soy = ifelse(str_detect(DESCRIPTION, &quot;Soy milk&quot;) &amp; dairy_tot &gt; 0, dairy_tot, 0), dairy_cow = ifelse(str_detect(DESCRIPTION, &quot;Soy milk&quot;, negate = TRUE) &amp; dairy_tot &gt; 0, dairy_tot, 0)) # check foods_day2_2 %&gt;% filter(dairy_tot &gt; 0) %&gt;% select(SEQN, DESCRIPTION, dairy_tot, dairy_soy, dairy_cow) #good # export foods day 1 and day 2 for later use write_rds(foods_day1_2, &quot;data_inputs/DIET/dietary_intake/DATA/clean_data/foods_day1_clean.rds&quot;) write_rds(foods_day2_2, &quot;data_inputs/DIET/dietary_intake/DATA/clean_data/foods_day2_clean.rds&quot;) Step 3: Clean the food and nutrient intake (summary) datasets rm(list=setdiff(ls(), c(&quot;foods_day1_2&quot;, &quot;foods_day2_2&quot;))) # QUICKLY HANDLE MEAT meat_sum_day1 &lt;- foods_day1_2 %&gt;% group_by(SEQN) %&gt;% summarise(pf_redm_tot_1 = sum(pf_redm_tot), pf_poultry_tot_1 = sum(pf_poultry_tot)) meat_sum_day2 &lt;- foods_day2_2 %&gt;% group_by(SEQN) %&gt;% summarise(pf_redm_tot_2 = sum(pf_redm_tot), pf_poultry_tot_2 = sum(pf_poultry_tot)) # 2015-2016 diet data (i) # demographic data demo_i &lt;- read_sas(&quot;data_inputs/DIET/dietary_intake/DATA/raw_data/demo_i.sas7bdat&quot;) %&gt;% select(SEQN, RIAGENDR, RIDRETH1, DMDEDUC2, INDFMPIR, RIDAGEYR) # fped day 1 fped_i1 &lt;- read_sas(&quot;data_inputs/DIET/dietary_intake/DATA/raw_data/fped_dr1tot_1516.sas7bdat&quot;) # fped day 2 fped_i2 &lt;- read_sas(&quot;data_inputs/DIET/dietary_intake/DATA/raw_data/fped_dr2tot_1516.sas7bdat&quot;) # join the two datasets fped_i &lt;- left_join(fped_i1, fped_i2) # nutrients day 1 nutrient_i1 &lt;- read_sas(&quot;data_inputs/DIET/dietary_intake/DATA/raw_data/dr1tot_i.sas7bdat&quot;) # nutrients day 2 nutrient_i2 &lt;- read_sas(&quot;data_inputs/DIET/dietary_intake/DATA/raw_data/dr2tot_i.sas7bdat&quot;) # join the two datasets nutrient_i &lt;- full_join(nutrient_i1, nutrient_i2) # Combine all datasets nhanes1516 &lt;- fped_i %&gt;% left_join(nutrient_i) %&gt;% left_join(demo_i) # 2017-2018 diet data (j) # demographic data demo_j &lt;- read_sas(&quot;data_inputs/DIET/dietary_intake/DATA/raw_data/demo_j.sas7bdat&quot;) %&gt;% select(SEQN, RIAGENDR, RIDRETH1, DMDEDUC2, INDFMPIR, RIDAGEYR) # fped day 1 fped_j1 &lt;- read_sas(&quot;data_inputs/DIET/dietary_intake/DATA/raw_data/fped_dr1tot_1718.sas7bdat&quot;) # fped day 2 fped_j2 &lt;- read_sas(&quot;data_inputs/DIET/dietary_intake/DATA/raw_data/fped_dr2tot_1718.sas7bdat&quot;) # join the two datasets fped_j &lt;- left_join(fped_j1, fped_j2) # nutrients day 1 nutrient_j1 &lt;- read_sas(&quot;data_inputs/DIET/dietary_intake/DATA/raw_data/dr1tot_j.sas7bdat&quot;) # nutrients day 2 nutrient_j2 &lt;- read_sas(&quot;data_inputs/DIET/dietary_intake/DATA/raw_data/dr2tot_j.sas7bdat&quot;) # join the two datasets nutrient_j &lt;- full_join(nutrient_j1, nutrient_j2) # Combine all datasets nhanes1718 &lt;- fped_j %&gt;% left_join(nutrient_j) %&gt;% left_join(demo_j) # combine the two nhanes datasets # first, change 2 variable names that don&#39;t match nhanes1718 &lt;- nhanes1718 %&gt;% rename(DR1TWS = DR1TWSZ, DR2TWS = DR2TWSZ) nhanes_comb &lt;- rbind(nhanes1516, nhanes1718) # combine with meat nhanes_comb1 &lt;- left_join(nhanes_comb, meat_sum_day1, by = &quot;SEQN&quot;) %&gt;% left_join(meat_sum_day2, by = &quot;SEQN&quot;) # create dairy variables dairy_day1 &lt;- foods_day1_2 %&gt;% group_by(SEQN) %&gt;% summarise(dairy_cow_1 = sum(dairy_cow), dairy_soy_1 = sum(dairy_soy)) dairy_day2 &lt;- foods_day2_2 %&gt;% group_by(SEQN) %&gt;% summarise(dairy_cow_2 = sum(dairy_cow), dairy_soy_2 = sum(dairy_soy)) # merge with nhanes dairy_bothdays &lt;- full_join(dairy_day1, dairy_day2) nhanes_comb2 &lt;- nhanes_comb1 %&gt;% left_join(dairy_bothdays, by = &quot;SEQN&quot;) Step 4: Construct dietary factors nhanes_comb3 &lt;- nhanes_comb2 %&gt;% rename(kcal_1 = DR1TKCAL, kcal_2 = DR2TKCAL, sat_fat_1 = DR1TSFAT, sat_fat_2 = DR2TSFAT, sodium_1 = DR1TSODI, sodium_2 = DR2TSODI, gr_refined_1 = DR1T_G_REFINED, gr_refined_2 = DR2T_G_REFINED, gr_whole_1 = DR1T_G_WHOLE, gr_whole_2 = DR2T_G_WHOLE, added_sugar_1 = DR1T_ADD_SUGARS, added_sugar_2 = DR2T_ADD_SUGARS, fruit_tot_1 = DR1T_F_TOTAL, fruit_tot_2 = DR2T_F_TOTAL, fruit_juice_1 = DR1T_F_JUICE, fruit_juice_2 = DR2T_F_JUICE, fiber_1 = DR1TFIBE, fiber_2 = DR2TFIBE, dairy_tot_1 = DR1T_D_TOTAL, dairy_tot_2 = DR2T_D_TOTAL, veg_dg_1 = DR1T_V_DRKGR, veg_dg_2 = DR2T_V_DRKGR, veg_oth_1 = DR1T_V_OTHER, veg_oth_2 = DR2T_V_OTHER, veg_ro_1 = DR1T_V_REDOR_TOTAL, veg_ro_2 = DR2T_V_REDOR_TOTAL, veg_sta_1 = DR1T_V_STARCHY_TOTAL, veg_sta_2 = DR2T_V_STARCHY_TOTAL, # Beans, peas, and lentils (legumes) computed as vegetables (cup eq.) veg_leg_1 = DR1T_V_LEGUMES, veg_leg_2 = DR2T_V_LEGUMES, oil_1 = DR1T_OILS, oil_2 = DR2T_OILS, pf_egg_1 = DR1T_PF_EGGS, pf_egg_2 = DR2T_PF_EGGS, pf_ns_1 = DR1T_PF_NUTSDS, pf_ns_2 = DR2T_PF_NUTSDS, # soy only # Soy products, excluding calcium fortified soy milk (soymilk) # and raw soybeans products (oz. eq.) pf_soy_1 = DR1T_PF_SOY, pf_soy_2 = DR2T_PF_SOY, pf_poultry_1 = DR1T_PF_POULT, pf_poultry_2 = DR2T_PF_POULT, pf_redm_1 = DR1T_PF_MEAT, pf_redm_2 = DR2T_PF_MEAT, pf_pm_1 = DR1T_PF_CUREDMEAT, pf_pm_2 = DR2T_PF_CUREDMEAT, pf_organ_1 = DR1T_PF_ORGAN, pf_organ_2 = DR2T_PF_ORGAN, # Beans and Peas (legumes) computed as protein foods (oz. eq.) pf_leg_1 = DR1T_PF_LEGUMES, pf_leg_2 = DR2T_PF_LEGUMES) %&gt;% rowwise() %&gt;% mutate(sea_omega3_fa_1 = sum(DR1TP226, DR1TP205), sea_omega3_fa_2 = sum(DR2TP226, DR2TP205), veg_exc_sta_1 = sum(veg_dg_1, veg_ro_1, veg_oth_1), veg_exc_sta_2 = sum(veg_dg_2, veg_ro_2, veg_oth_2), fruit_exc_juice_1 = sum(DR1T_F_CITMLB, DR1T_F_OTHER), fruit_exc_juice_2 = sum(DR2T_F_CITMLB, DR2T_F_OTHER), # pf_redm_tot_1 = sum(), # pf_redm_tot_2 = sum(), # # pf_poultry_tot_1 = sum(), # pf_poultry_tot_2 = sum(), pufa_energy_1 = ((DR1TPFAT * 9) / kcal_1) * 100, pufa_energy_2 = ((DR2TPFAT * 9) / kcal_2) * 100, sfat_energy_1 = ((sat_fat_1 * 9) / kcal_1) * 100, sfat_energy_2 = ((sat_fat_2 * 9) / kcal_2) * 100, pf_seafood_1 = sum(DR1T_PF_SEAFD_HI, DR1T_PF_SEAFD_LOW), pf_seafood_2 = sum(DR2T_PF_SEAFD_HI, DR2T_PF_SEAFD_LOW), # includes legumes and soy foods leg_tot_1 = sum(pf_leg_1, pf_soy_1), leg_tot_2 = sum(pf_leg_2, pf_soy_2), pf_animal_1 = sum(DR1T_PF_MPS_TOTAL, pf_egg_1), pf_animal_2 = sum(DR2T_PF_MPS_TOTAL, pf_egg_2), pf_plant_1 = sum(pf_leg_1, pf_ns_1, pf_soy_1), pf_plant_2 = sum(pf_leg_2, pf_ns_2, pf_soy_2) ) # select the variables we need nhanes_comb4 &lt;- nhanes_comb3 %&gt;% select(SEQN, RIAGENDR, RIDRETH1, DMDEDUC2, INDFMPIR, RIDAGEYR, SDMVPSU, SDMVSTRA, WTDRD1, WTDR2D, DR1DRSTZ, DR2DRSTZ, DRDINT, ends_with(&quot;_1&quot;), ends_with(&quot;_2&quot;)) %&gt;% ungroup() # stop using rowwise Step 5: Create sociodemographic subgroups nhanes_comb5 &lt;- nhanes_comb4 %&gt;% mutate( female = ifelse(RIAGENDR == 2, 1, 0), sex = ifelse(female == 1, 1, 2), race = recode(RIDRETH1, `3` = 1, `4` = 2, `1` = 3, `2` = 3, `5` = 4), age = case_when(RIDAGEYR &gt;= 20 &amp; RIDAGEYR &lt; 35 ~ 1, RIDAGEYR &gt;= 35 &amp; RIDAGEYR &lt; 45 ~ 2, RIDAGEYR &gt;= 45 &amp; RIDAGEYR &lt; 55 ~ 3, RIDAGEYR &gt;= 55 &amp; RIDAGEYR &lt; 65 ~ 4, RIDAGEYR &gt;= 65 &amp; RIDAGEYR &lt; 75 ~ 5, RIDAGEYR &gt;= 75 ~ 6), # create new weight variable wtnew = WTDRD1/2) Step 6: Create averages of dietary factors for Day 1 and Day 2 nhanes_comb6 &lt;- nhanes_comb5 %&gt;% rowwise() %&gt;% mutate(kcal = mean(c(kcal_1, kcal_2), na.rm = TRUE), sat_fat = mean(c(sat_fat_1, sat_fat_2), na.rm = TRUE), sodium = mean(c(sodium_1, sodium_2), na.rm = TRUE), gr_refined = mean(c(gr_refined_1, gr_refined_2), na.rm = TRUE), gr_whole = mean(c(gr_whole_1, gr_whole_2), na.rm = TRUE), added_sugar = mean(c(added_sugar_1, added_sugar_2), na.rm = TRUE), fruit_tot = mean(c(fruit_tot_1, fruit_tot_2), na.rm = TRUE), fruit_exc_juice = mean(c(fruit_exc_juice_1, fruit_exc_juice_2), na.rm = TRUE), fruit_juice = mean(c(fruit_juice_1, fruit_juice_2), na.rm = TRUE), fiber = mean(c(fiber_1, fiber_2), na.rm = TRUE), dairy_tot = mean(c(dairy_tot_1, dairy_tot_2), na.rm = TRUE), dairy_cow = mean(c(dairy_cow_1, dairy_cow_2), na.rm = TRUE), dairy_soy = mean(c(dairy_soy_1, dairy_soy_2), na.rm = TRUE), veg_dg = mean(c(veg_dg_1, veg_dg_2), na.rm = TRUE), veg_oth = mean(c(veg_oth_1, veg_oth_2), na.rm = TRUE), veg_ro = mean(c(veg_ro_1, veg_ro_2), na.rm = TRUE), veg_sta = mean(c(veg_sta_1, veg_sta_2), na.rm = TRUE), veg_leg = mean(c(veg_leg_1, veg_leg_2), na.rm = TRUE), veg_exc_sta = mean(c(veg_exc_sta_1, veg_exc_sta_2), na.rm = TRUE), oil = mean(c(oil_1, oil_2), na.rm = TRUE), pf_egg = mean(c(pf_egg_1, pf_egg_2), na.rm = TRUE), pf_ns = mean(c(pf_ns_1, pf_ns_2), na.rm = TRUE), pf_soy = mean(c(pf_soy_1, pf_soy_2), na.rm = TRUE), pf_poultry = mean(c(pf_poultry_1, pf_poultry_2), na.rm = TRUE), pf_poultry_tot = mean(c(pf_poultry_tot_1, pf_poultry_tot_2), na.rm = TRUE), pf_pm = mean(c(pf_pm_1, pf_pm_2), na.rm = TRUE), pf_redm = mean(c(pf_redm_1, pf_redm_2), na.rm = TRUE), pf_redm_tot = mean(c(pf_redm_tot_1, pf_redm_tot_2), na.rm = TRUE), pf_organ = mean(c(pf_organ_1, pf_organ_2), na.rm = TRUE), pf_leg = mean(c(pf_leg_1, pf_leg_2), na.rm = TRUE), sea_omega3_fa = mean(c(sea_omega3_fa_1, sea_omega3_fa_2), na.rm = TRUE), pufa_energy = mean(c(pufa_energy_1, pufa_energy_2), na.rm = TRUE), sfat_energy = mean(c(sfat_energy_1, sfat_energy_2), na.rm = TRUE), pf_seafood = mean(c(pf_seafood_1, pf_seafood_2), na.rm = TRUE), leg_tot = mean(c(leg_tot_1, leg_tot_2), na.rm = TRUE), pf_animal = mean(c(pf_animal_1, pf_animal_2), na.rm = TRUE), pf_plant = mean(c(pf_plant_1, pf_plant_2), na.rm = TRUE)) # get rid of NaN nhanes_comb6[nhanes_comb6 == &quot;NaN&quot;] &lt;- NA # ungroup nhanes_comb7 &lt;- nhanes_comb6 %&gt;% ungroup() # Merge with subgroup file subgroups &lt;- read_csv(&quot;data_inputs/OTHER/labels/DATA/population_subgroups_48_060923_FINAL.csv&quot;) nhanes_comb8 &lt;- nhanes_comb7 %&gt;% left_join(subgroups, by = c(&quot;age&quot; = &quot;Age&quot;, &quot;sex&quot; = &quot;Sex&quot;, &quot;race&quot; = &quot;Race&quot;)) # create final dataset nhanes_final &lt;- nhanes_comb8 # look at meat variables nhanes_final %&gt;% select(SEQN, starts_with(c(&quot;pf_redm&quot;, &quot;pf_poultry&quot;, &quot;pf_pm&quot;, &quot;pf_organ&quot;))) %&gt;% mutate(sumtot = (pf_redm + pf_poultry + pf_pm + pf_organ == pf_redm_tot + pf_poultry_tot), sum1 = (pf_redm_1 + pf_poultry_1 + pf_pm_1 + pf_organ_1 == pf_redm_tot_1 + pf_poultry_tot_1), sum2 = (pf_redm_2 + pf_poultry_2 + pf_pm_2 + pf_organ_2 == pf_redm_tot_2 + pf_poultry_tot_2)) nhanes_final %&gt;% select(SEQN, starts_with(c(&quot;pf_redm&quot;, &quot;pf_poultry&quot;, &quot;pf_pm&quot;, &quot;pf_organ&quot;))) %&gt;% mutate(sum1 = (pf_redm + pf_poultry + pf_pm + pf_organ == pf_redm_tot + pf_poultry_tot)) %&gt;% filter(sum1 == &quot;FALSE&quot;) # look at day 1 nhanes_final %&gt;% rowwise() %&gt;% select(SEQN, pf_redm_1, pf_poultry_1, pf_pm_1, pf_organ_1, pf_redm_tot_1, pf_poultry_tot_1) %&gt;% mutate(sum1 = round(sum(pf_redm_1, pf_poultry_1, pf_pm_1, pf_organ_1), digits = 3), sum2 = round(sum(pf_redm_tot_1, pf_poultry_tot_1), digits = 3), my_test = (sum1 == sum2)) %&gt;% filter(my_test == &quot;FALSE&quot;) %&gt;% mutate(my_subtract = sum2 - sum1) %&gt;% filter(my_subtract &lt; -0.05 | my_subtract &gt; 0.05) # not bad # look at day2 nhanes_final %&gt;% rowwise() %&gt;% select(SEQN, pf_redm_2, pf_poultry_2, pf_pm_2, pf_organ_2, pf_redm_tot_2, pf_poultry_tot_2) %&gt;% mutate(sum1 = round(sum(pf_redm_2, pf_poultry_2, pf_pm_2, pf_organ_2), digits = 3), sum2 = round(sum(pf_redm_tot_2, pf_poultry_tot_2), digits = 3), my_test = (sum1 == sum2)) %&gt;% filter(my_test == &quot;FALSE&quot;) %&gt;% mutate(my_subtract = sum2 - sum1) %&gt;% filter(my_subtract &lt; -0.05 | my_subtract &gt; 0.05) # not bad Step 7: Examine cleaned NHANES data # check missing summary(nhanes_final) # check for outliers # kcal &lt; 500 nhanes_final %&gt;% filter(kcal_1 &lt; 500) %&gt;% nrow() #233 nhanes_final %&gt;% filter(kcal_2 &lt; 500) %&gt;% nrow() #301 # kcal &gt; 3500 nhanes_final %&gt;% filter(kcal_1 &gt; 3500) %&gt;% nrow() #1028 nhanes_final %&gt;% filter(kcal_2 &gt; 3500) %&gt;% nrow() #588 # do not remove because I will filter out # dietary recalls that are not valid later # diet recall status table(nhanes_final$DR1DRSTZ, useNA = &quot;always&quot;) table(nhanes_final$DR2DRSTZ, useNA = &quot;always&quot;) # first, create inAnalysis variable nhanes_final1 &lt;- nhanes_final %&gt;% rowwise() %&gt;% mutate( # Define sub-population of interest: # Adults aged 20+ with 1 or 2 days of reliable dietary recalls reliable_yes = ifelse((DRDINT == 1 &amp; DR1DRSTZ == 1) | (DRDINT == 2 &amp; DR1DRSTZ == 1 &amp; DR2DRSTZ == 1), 1, 0), inAnalysis = (!(is.na(subgroup)) &amp; reliable_yes == 1), # if subgroup ISN&#39;T missing and reliable data # Change NAs to 0s, otherwise svydesign function below won&#39;t run wtnew = ifelse(is.na(wtnew), 0, wtnew), SDMVPSU = ifelse(is.na(SDMVPSU), 0, SDMVPSU), SDMVSTRA = ifelse(is.na(SDMVSTRA), 0, SDMVSTRA) ) # check new survey weight nhanes_final1 %&gt;% select(SEQN, wtnew, SDMVPSU, SDMVSTRA, inAnalysis) # looks good # export write_rds(nhanes_final1, &quot;data_inputs/DIET/dietary_intake/DATA/clean_data/nhanes1518_clean.rds&quot;) Finally, the cleaned dataset is exported to use later. 3.3 Create Sugar Sweetened Beverage (SSB) Variables Now we must separately deal with the beverage data in NHANES. Because SSB can be defined many different ways, there is no “SSB” variable that comes with the NHANES dataset. We must use the raw data to create our own. Our goal is to create SSB variables that we can use in our analysis. 3.3.1 Import and Merge Data Inputs Set up the working directory. rm(list=ls()) # load packages library(tidyverse) library(readxl) library(haven) Import the WWEIA 2015-2016 and 2017-2018 datasets. These contain categorizations of the FNDDS food codes that we will utilize later on. wweia1516 &lt;- read_xlsx(&quot;data_inputs/DIET/dietary_intake/DATA/raw_data/WWEIA1516_foodcat_FNDDS.xlsx&quot;) wweia1718 &lt;- read_xlsx(&quot;data_inputs/DIET/dietary_intake/DATA/raw_data/WWEIA1718_foodcat_FNDDS.xlsx&quot;) Then import these other categorizations (GL1, GL2, GL3) that are used. Not really sure what these are for… gl1 &lt;- read_xlsx(&quot;data_inputs/DIET/dietary_intake/DATA/raw_data/WWEIA category codes.xlsx&quot;, sheet = &quot;GL1&quot;) gl2 &lt;- read_xlsx(&quot;data_inputs/DIET/dietary_intake/DATA/raw_data/WWEIA category codes.xlsx&quot;, sheet = &quot;GL2&quot;) gl2b &lt;- read_xlsx(&quot;data_inputs/DIET/dietary_intake/DATA/raw_data/WWEIA category codes.xlsx&quot;, sheet = &quot;GL2b&quot;) gl3 &lt;- read_xlsx(&quot;data_inputs/DIET/dietary_intake/DATA/raw_data/WWEIA category codes.xlsx&quot;, sheet = &quot;GL3&quot;) Then, import a mapping from the WWEIA categories to these GL categories; and then join everything together. map &lt;- read_xlsx(&quot;data_inputs/DIET/dietary_intake/DATA/raw_data/WWEIA category codes.xlsx&quot;, sheet = &quot;Mapping&quot;) # join map_join &lt;- map %&gt;% left_join(gl1) %&gt;% left_join(gl2) %&gt;% left_join(gl2b) %&gt;% left_join(gl3) # merge with wweia datasets wweia1516_1 &lt;- wweia1516 %&gt;% left_join(map_join, by = &quot;category_number&quot;) wweia1718_1 &lt;- wweia1718 %&gt;% left_join(map_join, by = &quot;category_number&quot;) Import FPED 2015-2016 and 2017-2018 datasets. fped1516 &lt;- read_sas(&quot;data_inputs/DIET/dietary_intake/DATA/raw_data/fped_1516.sas7bdat&quot;) fped1718 &lt;- read_sas(&quot;data_inputs/DIET/dietary_intake/DATA/raw_data/fped_1718.sas7bdat&quot;) Calculate the number of grams of added sugar (add_sugars_g), originally provided in teaspoons (ADD_SUGARS), in one serving of each FNDDS food code. fped1516_1 &lt;- fped1516 %&gt;% rename(food_code = FOODCODE) %&gt;% # convert tsp to gram using 1 tsp=4.2g sugar mutate(add_sugars_g = ADD_SUGARS * 4.2) %&gt;% select(food_code, add_sugars_g) fped1718_1 &lt;- fped1718 %&gt;% rename(food_code = FOODCODE) %&gt;% # convert tsp to gram using 1 tsp=4.2g sugar mutate(add_sugars_g = ADD_SUGARS * 4.2) %&gt;% select(food_code, add_sugars_g) Import the NHANES individual-level food data (cleaned in Chapter XX), and merge with the FPED and WWEIA datasets. # read in nhanes individual food data foods_day1 &lt;- read_rds(&quot;data_inputs/DIET/dietary_intake/DATA/clean_data/foods_day1_clean.rds&quot;) foods_day2 &lt;- read_rds(&quot;data_inputs/DIET/dietary_intake/DATA/clean_data/foods_day2_clean.rds&quot;) # split up by NHANES cycle x Day of intake nhanes1516_day1 &lt;- foods_day1 %&gt;% filter(nhanes_cycle == &quot;2015-2016&quot;) nhanes1718_day1 &lt;- foods_day1 %&gt;% filter(nhanes_cycle == &quot;2017-2018&quot;) nhanes1516_day2 &lt;- foods_day2 %&gt;% filter(nhanes_cycle == &quot;2015-2016&quot;) nhanes1718_day2 &lt;- foods_day2 %&gt;% filter(nhanes_cycle == &quot;2017-2018&quot;) # merge fped and wweia datasets merge1516 &lt;- left_join(wweia1516_1, fped1516_1, by = &quot;food_code&quot;) merge1718 &lt;- left_join(wweia1718_1, fped1718_1, by = &quot;food_code&quot;) # merge &quot;merge&quot; datasets with nhanes datasets nhanes1516_day1_join &lt;- left_join(nhanes1516_day1, merge1516, by = c(&quot;DR1IFDCD&quot; = &quot;food_code&quot;)) nhanes1516_day2_join &lt;- left_join(nhanes1516_day2, merge1516, by = c(&quot;DR2IFDCD&quot; = &quot;food_code&quot;)) nhanes1718_day1_join &lt;- left_join(nhanes1718_day1, merge1718, by = c(&quot;DR1IFDCD&quot; = &quot;food_code&quot;)) nhanes1718_day2_join &lt;- left_join(nhanes1718_day2, merge1718, by = c(&quot;DR2IFDCD&quot; = &quot;food_code&quot;)) 3.3.2 Create SSB Indicator Variable Our team decided that a beverage would only be considered an “SSB” if it contained more than 5 grams of added sugar per serving. We set the indicator vairable “ssb” equal to 1 if the number of grams of added sugar per serving (“add_sugars_g”) was greater than or equal to 5 AND if the GL1 category was equal to 151 (“Sugar-sweetened beverages”), 152 (“Sugar-sweetened beverages (diet vs. SSB)”), 153 (“Nutritional beverages (diet vs. SSB)), 154 (”Smoothies and grain drinks (diet vs. SSB)“), 155 (”Coffee”), or 156 (“Tea”). We set “ssb” equal to 0 in all other cases. # work on Day 1 of NHANES &#39;15-&#39;16 first nhanes1516_day1_join_1 &lt;- nhanes1516_day1_join %&gt;% mutate(ssb = ifelse(add_sugars_g &gt;= 5 &amp; between(GL1, 151, 156), 1, 0)) # Day 1 of NHANES &#39;17--18 nhanes1718_day1_join_1 &lt;- nhanes1718_day1_join %&gt;% mutate(ssb = ifelse(add_sugars_g &gt;= 5 &amp; between(GL1, 151, 156), 1, 0)) # only select necessary vars nhanes1516_day1_join_2 &lt;- nhanes1516_day1_join_1 %&gt;% select(SEQN, DR1ILINE, DR1IFDCD, DESCRIPTION, DR1IGRMS, ssb) nhanes15718_day1_join_2 &lt;- nhanes1718_day1_join_1 %&gt;% select(SEQN, DR1ILINE, DR1IFDCD, DESCRIPTION, DR1IGRMS, ssb) # bind Day 1 of NHANES &#39;15-&#39;16 and &#39;17-&#39;18 together day1_final &lt;- rbind(nhanes1516_day1_join_2, nhanes15718_day1_join_2) # now work on Day 2 of NHANES &#39;15-&#39;16 nhanes1516_day2_join_1 &lt;- nhanes1516_day2_join %&gt;% mutate(ssb = ifelse(add_sugars_g &gt;= 5 &amp; between(GL1, 151, 156), 1, 0)) # Day 2 of NHANES &#39;17-&#39;18 nhanes1718_day2_join_1 &lt;- nhanes1718_day2_join %&gt;% mutate(ssb = ifelse(add_sugars_g &gt;= 5 &amp; between(GL1, 151, 156), 1, 0)) # only select necessary vars nhanes1516_day2_join_2 &lt;- nhanes1516_day2_join_1 %&gt;% select(SEQN, DR2ILINE, DR2IFDCD, DESCRIPTION, DR2IGRMS, ssb) nhanes1718_day2_join_2 &lt;- nhanes1718_day2_join_1 %&gt;% select(SEQN, DR2ILINE, DR2IFDCD, DESCRIPTION, DR2IGRMS, ssb) # bind Day 2 of NHANES &#39;15-&#39;16 and &#39;17-&#39;18 together day2_final &lt;- rbind(nhanes1516_day2_join_2, nhanes1718_day2_join_2) Export the datasets to use in the next Chapter section. write_rds(day1_final, &quot;data_inputs/DIET/dietary_intake/DATA/clean_data/foods_day1_ssb.rds&quot;) write_rds(day2_final, &quot;data_inputs/DIET/dietary_intake/DATA/clean_data/foods_day2_ssb.rds&quot;) 3.3.3 Calculate SSB Intake Now that we know which foodcodes are sugar-sweetened beverages, we want to calculate how much SSB each participant consumed (in grams), per day. # Day 1 ssb_day1 &lt;- day1_final %&gt;% mutate(ssb = as.character(ssb)) %&gt;% group_by(SEQN, ssb) %&gt;% summarise(grams = sum(DR1IGRMS)) %&gt;% #calculate grams of intake by person arrange(SEQN, ssb) ssb_day1_wide &lt;- pivot_wider(ssb_day1, id_cols = SEQN, names_from = ssb, values_from = grams, names_prefix = &quot;ssb&quot;) ssb_day1_wide1 &lt;- ssb_day1_wide %&gt;% mutate(ssb1 = ifelse(!is.na(ssb0) &amp; is.na(ssb1), 0, ssb1)) %&gt;% select(SEQN, ssb1) %&gt;% rename(ssb_1 = ssb1) # Day 2 ssb_day2 &lt;- day2_final %&gt;% mutate(ssb = as.character(ssb)) %&gt;% group_by(SEQN, ssb) %&gt;% summarise(grams = sum(DR2IGRMS)) %&gt;% #calculate grams of intake by person arrange(SEQN, ssb) ssb_day2_wide &lt;- pivot_wider(ssb_day2, id_cols = SEQN, names_from = ssb, values_from = grams, names_prefix = &quot;ssb&quot;) ssb_day2_wide1 &lt;- ssb_day2_wide %&gt;% mutate(ssb1 = ifelse(!is.na(ssb0) &amp; is.na(ssb1), 0, ssb1)) %&gt;% select(SEQN, ssb1) %&gt;% rename(ssb_2 = ssb1) # combine ssb_bothdays &lt;- full_join(ssb_day1_wide1, ssb_day2_wide1, by = &quot;SEQN&quot;) Next, calculate the each participant’s average intake across 2 days of intake. # check # are there any where both are missing? no ssb_bothdays %&gt;% filter(is.na(ssb_1) &amp; is.na(ssb_2)) # calculate day1/day2 ssb intake average ssb_bothdays_1 &lt;- ssb_bothdays %&gt;% rowwise() %&gt;% mutate(ssb = mean(c(ssb_1, ssb_2), na.rm=TRUE)) # get rid of NaN ssb_bothdays_1[ssb_bothdays_1 == &quot;NaN&quot;] &lt;- NA Now merge with the main NHANES intake dataset. # read in clean nhanes dataset nhanes &lt;- read_rds(&quot;data_inputs/DIET/dietary_intake/DATA/clean_data/nhanes1518_clean.rds&quot;) # merge nhanes_1 &lt;- left_join(nhanes, ssb_bothdays_1, by = &quot;SEQN&quot;) # which ones where ssb (in grams) is more than 0 but lower than 10 grams? (maybe a sip?) nhanes_1 %&gt;% filter(ssb_1 &gt; 0 &amp; ssb_1 &lt; 11) %&gt;% head() nhanes_1 %&gt;% filter(ssb_2 &gt; 0 &amp; ssb_2 &lt; 11) %&gt;% head() # look at just one person - 84956 foods_day2 %&gt;% filter(SEQN == 84956) %&gt;% head() foods_day1 %&gt;% filter(SEQN == 84997) %&gt;% head() # it looks fine Export. write_rds(nhanes_1, &quot;data_inputs/DIET/dietary_intake/DATA/clean_data/nhanes1518_incl_ssb_clean.rds&quot;) 3.4 Energy Adjustement This next section describes the process of conducting energy adjustment. Energy adjustment is an analytic method by which nutrient and food group intakes are evaluated in relation to total energy intake. Energy adjustment methods are used for two primary reasons: They account for the fact that total energy requirements are related to body size, metabolic efficiency, and physical activity, thereby providing a measure of diet composition. They are useful in mitigating the effects of [glossary term:]measurement error in data collected using self-reported dietary assessment instruments. One frequently used energy adjustment method is the residual method. In this method, the energy-adjusted intake estimate is the residual from a regression model in which total energy intake is the independent variable and absolute nutrient intake is the dependent variable. Thus, the residual is an estimate of nutrient intake uncorrelated with total energy intake and directly related to overall variation in food choice and composition. You can find more information about this on the NCI website here. Additionally, you can refer to Willett WC, Howe GR, Kushi LH. Adjustment for total energy intake in epidemiologic studies. Am J Clin Nutr. 1997 Apr;65(4 Suppl):1220S-1228S; discussion 1229S-1231S. doi: 10.1093/ajcn/65.4.1220S. PMID: 9094926. Step 1: Set up workspace rm(list=ls()) # load packages library(tidyverse) library(modelr) library(survey) Step 2: Import and prepare cleaned NHANES dataset nhanes &lt;- read_rds(&quot;data_inputs/DIET/dietary_intake/DATA/clean_data/nhanes1518_incl_ssb_clean.rds&quot;) %&gt;% ungroup() # get rid of rowwise formatting nhanes1 &lt;- nhanes %&gt;% select(-c(kcal:pf_plant, ssb)) %&gt;% relocate(c(wtnew:inAnalysis), .before = fruit_juice_1) # wide to long nhanes_long &lt;- pivot_longer(nhanes1, cols = ends_with(c(&quot;_1&quot;, &quot;_2&quot;)), names_to = &quot;names_temp&quot;, values_to = &quot;values_temp&quot;) nhanes_long1 &lt;- nhanes_long %&gt;% separate(names_temp, into=c(&quot;name&quot;, &quot;day&quot;), sep = &quot;_(?=[^_]+$)&quot;) nhanes_long2 &lt;- nhanes_long1 %&gt;% pivot_wider(names_from = &quot;name&quot;, values_from = &quot;values_temp&quot;) 3.4.0.1 Step 3: Conduct energy adjustment using the residual method Calculate the mean calorie intake across all participants and days (“meancalories”), each observation’s log(calories), the log of “meancalories”, and the log of 2000 kcals. nhanes2 &lt;- nhanes_long2 %&gt;% mutate(calories = kcal, meancalories = mean(calories, na.rm = TRUE), log_calories = log(calories), log_meancalories = log(meancalories), log_2000 = log(2000)) There are a few people who have kcal intake = 0, and the log of this value is -Inf. We need to change this to NA so that the function will run. # 7 people have kcal=0 nhanes2 %&gt;% filter(log_calories == &quot;-Inf&quot; &amp; inAnalysis == &quot;TRUE&quot;) %&gt;% head() # if logcalories is -Inf, change to NA nhanes3 &lt;- nhanes2 %&gt;% mutate(log_calories = ifelse(log_calories == &quot;-Inf&quot;, NA, log_calories)) %&gt;% arrange(SEQN, day) # check nhanes3 %&gt;% filter(log_calories == &quot;-Inf&quot; &amp; inAnalysis == &quot;TRUE&quot;) #good Below is a function that we can apply to all dietary factors in order to calculate the residual method for each. resid_function &lt;- function(x, y){ dat &lt;- x dat[[&quot;var_tem&quot;]] &lt;- dat[[y]] dat1 &lt;- dat %&gt;% mutate(log_var_tem = ifelse(var_tem &gt; 0, log(var_tem), NA)) mod &lt;- lm(log_var_tem ~ log_calories, data = dat1) a = summary(mod)$coefficients[&quot;(Intercept)&quot;, &quot;Estimate&quot;] b = summary(mod)$coefficients[&quot;log_calories&quot;, &quot;Estimate&quot;] dat_new &lt;- dat1 %&gt;% add_residuals(mod) %&gt;% rowwise() %&gt;% mutate(log_cons_var_tem = a + (b * log_2000), a_log_var_tem = log_cons_var_tem + resid, a_var_tem = ifelse(var_tem == 0, 0,exp(a_log_var_tem)), &quot;{y}_adj&quot; := a_var_tem) dat_new1 &lt;- dat_new %&gt;% arrange(SEQN, day) %&gt;% select(paste0(y, &quot;_adj&quot;)) print(dat_new1) } # test resid_function(nhanes3, &quot;pf_pm&quot;) resid_function(nhanes3, &quot;fruit_exc_juice&quot;) resid_function(nhanes3, &quot;sodium&quot;) Create a vector of dietary factors we want to use. diet_vars &lt;- read_csv(&quot;data_inputs/OTHER/labels/DATA/dietary_factors_010424_FINAL.csv&quot;) %&gt;% select(Food_group) %&gt;% unlist() %&gt;% as.vector() nums &lt;- which(variable.names(nhanes3) %in% diet_vars) new_diet_vars &lt;- variable.names(nhanes3[nums]) Apply the function of all dietary factors of interest. # create empty list resid_list &lt;- list() # loop through all diet factors for (i in new_diet_vars) { resid_list[[i]] &lt;- resid_function(nhanes3, i) } Create a dataset that contains all of the adjusted values, and export. # nhanes with adjusted vars nhanes_adj &lt;- nhanes3 %&gt;% cbind(bind_cols(resid_list)) # check a few diet vars nhanes_adj %&gt;% select(ssb, ssb_adj) %&gt;% head() nhanes_adj %&gt;% select(fruit_exc_juice, fruit_exc_juice_adj) %&gt;% head() nhanes_adj %&gt;% select(pf_ns, pf_ns_adj) %&gt;% head() nhanes_adj %&gt;% select(pf_redm_tot, pf_redm_tot_adj) %&gt;% head() nhanes_adj %&gt;% select(pf_poultry_tot, pf_poultry_tot_adj) %&gt;% head() # export data write_rds(nhanes_adj, &quot;data_inputs/DIET/dietary_intake/DATA/clean_data/nhanes1518_adj_clean_long.rds&quot;) write_csv(nhanes_adj, &quot;data_inputs/DIET/dietary_intake/DATA/clean_data/nhanes1518_adj_clean_long.csv&quot;) 3.4.0.2 Step 4: Calculate average daily intake of adjusted variables Pivot to wide format, then calculate the average daily intake by taking the mean of Day 1 and Day 2 values. # pivot to wide nhanes_adj_wide &lt;- nhanes_adj %&gt;% pivot_wider(id_cols = SEQN:inAnalysis, names_from = day, values_from = ends_with(&quot;_adj&quot;)) # calculate averages nhanes_adj_wide1 &lt;- nhanes_adj_wide %&gt;% rowwise() %&gt;% mutate( # fruits fruit_tot_adj = mean(c(fruit_tot_adj_1, fruit_tot_adj_2), na.rm = TRUE), fruit_exc_juice_adj = mean(c(fruit_exc_juice_adj_1, fruit_exc_juice_adj_2), na.rm = TRUE), fruit_juice_adj = mean(c(fruit_juice_adj_1, fruit_juice_adj_2), na.rm = TRUE), # vegs veg_dg_adj = mean(c(veg_dg_adj_1, veg_dg_adj_2), na.rm = TRUE), veg_oth_adj = mean(c(veg_oth_adj_1, veg_oth_adj_2), na.rm = TRUE), veg_ro_adj = mean(c(veg_ro_adj_1, veg_ro_adj_2), na.rm = TRUE), veg_sta_adj = mean(c(veg_sta_adj_1, veg_sta_adj_2), na.rm = TRUE), veg_leg_adj = mean(c(veg_leg_adj_1, veg_leg_adj_2), na.rm = TRUE), veg_exc_sta_adj = mean(c(veg_exc_sta_adj_1, veg_exc_sta_adj_2), na.rm = TRUE), # grains gr_refined_adj = mean(c(gr_refined_adj_1, gr_refined_adj_2), na.rm = TRUE), gr_whole_adj = mean(c(gr_whole_adj_1, gr_whole_adj_2), na.rm = TRUE), # plant based proteins pf_ns_adj = mean(c(pf_ns_adj_1, pf_ns_adj_2), na.rm = TRUE), pf_soy_adj = mean(c(pf_soy_adj_1, pf_soy_adj_2), na.rm = TRUE), pf_leg_adj = mean(c(pf_leg_adj_1, pf_leg_adj_2), na.rm = TRUE), leg_tot_adj = mean(c(leg_tot_adj_1, leg_tot_adj_2), na.rm = TRUE), pf_plant_adj = mean(c(pf_plant_adj_1, pf_plant_adj_2), na.rm = TRUE), # animal proteins pf_egg_adj = mean(c(pf_egg_adj_1, pf_egg_adj_2), na.rm = TRUE), pf_seafood_adj = mean(c(pf_seafood_adj_1, pf_seafood_adj_2), na.rm = TRUE), pf_poultry_adj = mean(c(pf_poultry_adj_1, pf_poultry_adj_2), na.rm = TRUE), pf_poultry_tot_adj = mean(c(pf_poultry_tot_adj_1, pf_poultry_tot_adj_2), na.rm = TRUE), pf_pm_adj = mean(c(pf_pm_adj_1, pf_pm_adj_2), na.rm = TRUE), pf_redm_adj = mean(c(pf_redm_adj_1, pf_redm_adj_2), na.rm = TRUE), pf_redm_tot_adj = mean(c(pf_redm_tot_adj_1, pf_redm_tot_adj_2), na.rm = TRUE), pf_animal_adj = mean(c(pf_animal_adj_1, pf_animal_adj_2), na.rm = TRUE), # ssb ssb_adj = mean(c(ssb_adj_1, ssb_adj_2), na.rm=TRUE), # dairy dairy_tot_adj = mean(c(dairy_tot_adj_1, dairy_tot_adj_2), na.rm = TRUE), dairy_cow_adj = mean(c(dairy_cow_adj_1, dairy_cow_adj_2), na.rm = TRUE), dairy_soy_adj = mean(c(dairy_soy_adj_1, dairy_soy_adj_2), na.rm = TRUE), # other foods oil_adj = mean(c(oil_adj_1, oil_adj_2), na.rm = TRUE), sodium_adj = mean(c(sodium_adj_1, sodium_adj_2), na.rm = TRUE), added_sugar_adj = mean(c(added_sugar_adj_1, added_sugar_adj_2), na.rm = TRUE), # other nutrients sea_omega3_fa_adj = mean(c(sea_omega3_fa_adj_1, sea_omega3_fa_adj_2), na.rm = TRUE), pufa_energy_adj = mean(c(pufa_energy_adj_1, pufa_energy_adj_2), na.rm = TRUE), sfat_energy_adj = mean(c(sfat_energy_adj_1, sfat_energy_adj_2), na.rm = TRUE), sat_fat_adj = mean(c(sat_fat_adj_1, sat_fat_adj_2), na.rm = TRUE), fiber_adj = mean(c(fiber_adj_1, fiber_adj_2), na.rm = TRUE)) Change unit to grams. Use the conversion units from the following file: data_inputs/OTHER/unit_conversions/DATA/Unit_conversions_1.4.24.csv # calculate food group means in grams nhanes_adj_wide2 &lt;- nhanes_adj_wide1 %&gt;% rowwise() %&gt;% mutate(veg_dg_adj_grams = veg_dg_adj * 118 , veg_oth_adj_grams = veg_oth_adj * 140, veg_ro_adj_grams = veg_ro_adj * 144, veg_sta_adj_grams = veg_sta_adj * 134, veg_tot_adj_grams = sum(veg_dg_adj_grams, veg_oth_adj_grams, veg_ro_adj_grams, veg_sta_adj_grams), gr_refined_adj_grams = gr_refined_adj * 36, gr_whole_adj_grams = gr_whole_adj * 51, gr_tot_adj_grams = sum(gr_refined_adj_grams, gr_whole_adj_grams), pf_egg_adj_grams = pf_egg_adj * 50, pf_poultry_tot_adj_grams = pf_poultry_tot_adj * 29, pf_redm_tot_adj_grams = pf_redm_tot_adj * 31, pf_seafood_adj_grams = pf_seafood_adj * 29, pf_ns_adj_grams = pf_ns_adj * 15, leg_tot_adj_grams = leg_tot_adj * 37, pf_tot_adj_grams = sum(pf_egg_adj_grams, pf_poultry_tot_adj_grams, pf_redm_tot_adj_grams, pf_seafood_adj_grams, pf_ns_adj_grams, leg_tot_adj_grams), fruit_exc_juice_adj_grams = fruit_exc_juice_adj * 152, fruit_juice_adj_grams = fruit_juice_adj * 251, fruit_tot_adj_grams = sum(fruit_exc_juice_adj_grams, fruit_juice_adj_grams)) # get rid of NaN nhanes_adj_wide2[nhanes_adj_wide2 == &quot;NaN&quot;] &lt;- NA Export. write_rds(nhanes_adj_wide2, &quot;data_inputs/DIET/dietary_intake/DATA/clean_data/nhanes1518_adj_clean_wide.rds&quot;) write_csv(nhanes_adj_wide2, &quot;data_inputs/DIET/dietary_intake/DATA/clean_data/nhanes1518_adj_clean_wide.csv&quot;, na = &quot;&quot;) 3.5 Calculating Standard Deviations Using SAS Macros When we estimate the average intakes, by demographic subgroup, in the previous section XX, the mean and standard error are calculated. We also need to calculate the standard deviations of the mean intake for each dietary factor. This can be done using the NCI Method SAS macros. We use a modified version of the SIMPLE macro, which is a single macro that links 3 NCI macros, the MIXTRAN, DISTRIB, and BRR_PVALUE_CI, to facilitate estimation of usual intake distributions for food and nutrients consumed “nearly-daily.” The SIMPLE macro documentation is provided here. An updated version of the macro was provided to our team by Hanqi Luo. The publication describing the macro is located here. The NCI macro documentation is provided here. The SIMPLE macro was modified by Brooke Bell (the person writing this!). She added code to the macro to additionally calculate the standard deviation of the mean intake. The version that she modified is located in the LASTING GitHub repo here: GitHub/LASTING/standard-deviations/macros/simple_macro_v3.4_bmb.sas This macro is run on the Tufts cluster because it uses a lot of processing power. The following sections will describe the data inputs that are used in the macro, and how to run the macro on the cluster. 3.5.1 Prepare Data for SAS Macros rm(list = ls()) library(tidyverse) library(fastDummies) # Import data nhanes &lt;- read_rds(&quot;data_inputs/DIET/dietary_intake/DATA/clean_data/nhanes1518_adj_clean_long.rds&quot;) # NEED TO USE ADJUSTED VALUES!!!!! 2-20-24 # only select certain variables nhanes1 &lt;- nhanes %&gt;% select(SEQN, age, sex, race, subgroup, DRDINT, SDMVPSU, SDMVSTRA, wtnew, reliable_yes, inAnalysis, day, ends_with(&quot;adj&quot;)) # create subgroup*inanalysis variable nhanes2 &lt;- nhanes1 %&gt;% mutate(subgroup_new = ifelse(inAnalysis == &quot;TRUE&quot;, subgroup, NA)) %&gt;% relocate(subgroup_new, .after = subgroup) #check nhanes2 %&gt;% filter(!(is.na(subgroup)) &amp; !(is.na(subgroup_new))) %&gt;% head() # create dummy variables nhanes3 &lt;- nhanes2 %&gt;% dummy_cols(select_columns = c(&quot;day&quot;, &quot;inAnalysis&quot;, &quot;subgroup&quot;, &quot;subgroup_new&quot;), remove_first_dummy = TRUE) # select vars nhanes4 &lt;- nhanes3 %&gt;% # select(SEQN, SDMVPSU, SDMVSTRA, wtnew, day:day_2, starts_with(&quot;subgroup_new&quot;)) %&gt;% relocate(day_2, .after = day) # need to remove rows where no diet intake on day 2 nhanes4 %&gt;% filter(DRDINT == 1 &amp; day == 2) %&gt;% head() nhanes5 &lt;- nhanes4 %&gt;% filter(!(DRDINT == 1 &amp; day == 2)) # check nhanes5 %&gt;% filter(is.na(fruit_tot_adj)) %&gt;% head() #good nhanes5 %&gt;% filter(is.na(fruit_tot_adj) &amp; inAnalysis == &quot;TRUE&quot;) %&gt;% head() #good # export write_csv(nhanes5, &quot;data_inputs/DIET/dietary_intake/DATA/clean_data/nhanes_incl_ssb_adj_clean_long.csv&quot;, na = &quot;&quot;) write_csv(nhanes5, &quot;/Users/bmb73/Documents/GitHub/LASTING/standard-deviations/in/nhanes_incl_ssb_adj_clean_long.csv&quot;, na = &quot;&quot;) 3.5.2 Run SAS Macro "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
